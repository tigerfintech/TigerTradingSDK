// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ChartKLineView
@_exported import ChartKLineView
import CoreGraphics
import Foundation
import QuartzCore
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers open class AnimatedMoveViewJob : ChartKLineView.AnimatedViewPortJob {
  @objc override public init(viewPortHandler: ChartKLineView.ViewPortHandler, xValue: Swift.Double, yValue: Swift.Double, transformer: ChartKLineView.Transformer, view: ChartKLineView.ChartViewBase, xOrigin: CoreFoundation.CGFloat, yOrigin: CoreFoundation.CGFloat, duration: Foundation.TimeInterval, easing: ChartKLineView.ChartEasingFunctionBlock?)
  @objc deinit
}
@objc open class AnimatedViewPortJob : ChartKLineView.ViewPortJob {
  @objc public init(viewPortHandler: ChartKLineView.ViewPortHandler, xValue: Swift.Double, yValue: Swift.Double, transformer: ChartKLineView.Transformer, view: ChartKLineView.ChartViewBase, xOrigin: CoreFoundation.CGFloat, yOrigin: CoreFoundation.CGFloat, duration: Foundation.TimeInterval, easing: ChartKLineView.ChartEasingFunctionBlock?)
  @objc deinit
  @objc override open func doJob()
  @objc open func start()
  @objc open func stop(finish: Swift.Bool)
}
@objc open class AnimatedZoomViewJob : ChartKLineView.AnimatedViewPortJob {
  @objc public init(viewPortHandler: ChartKLineView.ViewPortHandler, transformer: ChartKLineView.Transformer, view: ChartKLineView.ChartViewBase, yAxis: ChartKLineView.YAxis, xAxisRange: Swift.Double, scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, xOrigin: CoreFoundation.CGFloat, yOrigin: CoreFoundation.CGFloat, zoomCenterX: CoreFoundation.CGFloat, zoomCenterY: CoreFoundation.CGFloat, zoomOriginX: CoreFoundation.CGFloat, zoomOriginY: CoreFoundation.CGFloat, duration: Foundation.TimeInterval, easing: ChartKLineView.ChartEasingFunctionBlock?)
  @objc deinit
}
@objc(ChartAnimatorDelegate) public protocol AnimatorDelegate {
  @objc func animatorUpdated(_ animator: ChartKLineView.Animator)
  @objc func animatorStopped(_ animator: ChartKLineView.Animator)
}
@_inheritsConvenienceInitializers @objc(ChartAnimator) open class Animator : ObjectiveC.NSObject {
  @objc weak open var delegate: (any ChartKLineView.AnimatorDelegate)?
  @objc open var updateBlock: (() -> Swift.Void)?
  @objc open var stopBlock: (() -> Swift.Void)?
  @objc open var phaseX: Swift.Double
  @objc open var phaseY: Swift.Double
  @objc override dynamic public init()
  @objc deinit
  @objc open func stop()
  @objc open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easingX: ChartKLineView.ChartEasingFunctionBlock?, easingY: ChartKLineView.ChartEasingFunctionBlock?)
  @objc open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easingOptionX: ChartKLineView.ChartEasingOption, easingOptionY: ChartKLineView.ChartEasingOption)
  @objc open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easing: ChartKLineView.ChartEasingFunctionBlock?)
  @objc open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easingOption: ChartKLineView.ChartEasingOption = .easeInOutSine)
  @objc open func animate(xAxisDuration: Foundation.TimeInterval, easing: ChartKLineView.ChartEasingFunctionBlock?)
  @objc open func animate(xAxisDuration: Foundation.TimeInterval, easingOption: ChartKLineView.ChartEasingOption = .easeInOutSine)
  @objc open func animate(yAxisDuration: Foundation.TimeInterval, easing: ChartKLineView.ChartEasingFunctionBlock?)
  @objc open func animate(yAxisDuration: Foundation.TimeInterval, easingOption: ChartKLineView.ChartEasingOption = .easeInOutSine)
}
@_inheritsConvenienceInitializers @objc(ChartAxisBase) open class AxisBase : ChartKLineView.ComponentBase {
  @objc override dynamic public init()
  @objc open var labelFont: UIKit.UIFont
  @objc open var labelTextColor: UIKit.UIColor
  @objc open var labelTextColors: [ChartKLineView.NSUIColor]?
  @objc open var axisLineColor: UIKit.UIColor
  @objc open var axisLineWidth: CoreFoundation.CGFloat
  @objc open var axisLineDashPhase: CoreFoundation.CGFloat
  @objc open var axisLineDashLengths: [CoreFoundation.CGFloat]!
  @objc open var gridColor: UIKit.UIColor
  @objc open var gridLineWidth: CoreFoundation.CGFloat
  @objc open var gridLineDashPhase: CoreFoundation.CGFloat
  @objc open var gridLineDashLengths: [CoreFoundation.CGFloat]!
  @objc open var gridLineCap: CoreGraphics.CGLineCap
  @objc open var drawGridLinesEnabled: Swift.Bool
  @objc open var drawAxisLineEnabled: Swift.Bool
  @objc open var drawLabelsEnabled: Swift.Bool
  @objc open var centerAxisLabelsEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var isCenterAxisLabelsEnabled: Swift.Bool {
    @objc get
  }
  @objc open var drawLimitLinesBehindDataEnabled: Swift.Bool
  @objc open var gridAntialiasEnabled: Swift.Bool
  @objc open var entries: [Swift.Double]
  @objc open var centeredEntries: [Swift.Double]
  @objc open var entryCount: Swift.Int {
    @objc get
  }
  @objc open var decimals: Swift.Int
  @objc open var granularityEnabled: Swift.Bool
  @objc open var granularity: Swift.Double {
    @objc get
    @objc set
  }
  @objc open var isGranularityEnabled: Swift.Bool {
    @objc get
  }
  @objc open var forceLabelsEnabled: Swift.Bool
  @objc open var forceEntriesEnabled: Swift.Bool
  @objc open func getLongestLabel() -> Swift.String
  @objc open func getFormattedLabel(_ index: Swift.Int) -> Swift.String
  @objc open var valueFormatter: (any ChartKLineView.IAxisValueFormatter)? {
    @objc get
    @objc set
  }
  @objc open var isDrawGridLinesEnabled: Swift.Bool {
    @objc get
  }
  @objc open var isDrawAxisLineEnabled: Swift.Bool {
    @objc get
  }
  @objc open var isDrawLabelsEnabled: Swift.Bool {
    @objc get
  }
  @objc open var isDrawLimitLinesBehindDataEnabled: Swift.Bool {
    @objc get
  }
  @objc open var spaceMin: Swift.Double
  @objc open var spaceMax: Swift.Double
  @objc open var _axisMinimum: Swift.Double
  @objc open var _axisMaximum: Swift.Double
  @objc open var axisRange: Swift.Double
  @objc open var axisMinLabels: Swift.Int {
    @objc get
    @objc set
  }
  @objc open var axisMaxLabels: Swift.Int {
    @objc get
    @objc set
  }
  @objc open var labelCount: Swift.Int {
    @objc get
    @objc set
  }
  @objc open func setLabelCount(_ count: Swift.Int, force: Swift.Bool)
  @objc open var isForceLabelsEnabled: Swift.Bool {
    @objc get
  }
  @objc open func addLimitLine(_ line: ChartKLineView.ChartLimitLine)
  @objc open func removeLimitLine(_ line: ChartKLineView.ChartLimitLine)
  @objc open func removeAllLimitLines()
  @objc open var limitLines: [ChartKLineView.ChartLimitLine] {
    @objc get
  }
  @objc open func resetCustomAxisMin()
  @objc open var isAxisMinCustom: Swift.Bool {
    @objc get
  }
  @objc open func resetCustomAxisMax()
  @objc open var isAxisMaxCustom: Swift.Bool {
    @objc get
  }
  @objc open var axisMinimum: Swift.Double {
    @objc get
    @objc set
  }
  @objc open var axisMaximum: Swift.Double {
    @objc get
    @objc set
  }
  @objc open func calculate(min dataMin: Swift.Double, max dataMax: Swift.Double)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class AxisExceptionLog {
  @objc deinit
}
@objc(ChartAxisRendererBase) open class AxisRendererBase : ChartKLineView.Renderer {
  @objc open var axis: ChartKLineView.AxisBase?
  @objc open var transformer: ChartKLineView.Transformer?
  @objc public init(viewPortHandler: ChartKLineView.ViewPortHandler, transformer: ChartKLineView.Transformer?, axis: ChartKLineView.AxisBase?)
  @objc open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc open func renderGridLines(context: CoreGraphics.CGContext)
  @objc open func renderAxisLine(context: CoreGraphics.CGContext)
  @objc open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc open func computeAxis(min: Swift.Double, max: Swift.Double, inverted: Swift.Bool)
  @objc open func computeAxisValues(min: Swift.Double, max: Swift.Double)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BarChartData : ChartKLineView.BarLineScatterCandleBubbleChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [any ChartKLineView.IChartDataSet]?)
  @objc open var barWidth: Swift.Double
  @objc open func groupBars(fromX: Swift.Double, groupSpace: Swift.Double, barSpace: Swift.Double)
  @objc open func groupWidth(groupSpace: Swift.Double, barSpace: Swift.Double) -> Swift.Double
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BarChartDataEntry : ChartKLineView.ChartDataEntry {
  @objc required dynamic public init()
  @objc override public init(x: Swift.Double, y: Swift.Double)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, data: Any?)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, icon: ChartKLineView.NSUIImage?)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, icon: ChartKLineView.NSUIImage?, data: Any?)
  @objc public init(x: Swift.Double, yValues: [Swift.Double])
  @objc convenience public init(x: Swift.Double, yValues: [Swift.Double], icon: ChartKLineView.NSUIImage?)
  @objc convenience public init(x: Swift.Double, yValues: [Swift.Double], data: Any?)
  @objc convenience public init(x: Swift.Double, yValues: [Swift.Double], icon: ChartKLineView.NSUIImage?, data: Any?)
  @objc open func sumBelow(stackIndex: Swift.Int) -> Swift.Double
  @objc open var negativeSum: Swift.Double {
    @objc get
  }
  @objc open var positiveSum: Swift.Double {
    @objc get
  }
  @objc open func calcPosNegSum()
  @objc open func calcRanges()
  @objc open var isStacked: Swift.Bool {
    @objc get
  }
  @objc open var yValues: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc open var ranges: [ChartKLineView.Range]? {
    @objc get
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc public protocol BarChartDataProvider : ChartKLineView.BarLineScatterCandleBubbleChartDataProvider {
  @objc var barData: ChartKLineView.BarChartData? { get }
  @objc var isDrawBarShadowEnabled: Swift.Bool { get }
  @objc var isDrawValueAboveBarEnabled: Swift.Bool { get }
  @objc var isHighlightFullBarEnabled: Swift.Bool { get }
}
@objc @_inheritsConvenienceInitializers open class BarChartDataSet : ChartKLineView.BarLineScatterCandleBubbleChartDataSet, ChartKLineView.IBarChartDataSet {
  @objc required dynamic public init()
  @objc override public init(entries: [ChartKLineView.ChartDataEntry]?, label: Swift.String?)
  open func calcMinMax(entry e: ChartKLineView.ChartDataEntry)
  @objc open var stackSize: Swift.Int {
    @objc get
  }
  @objc open var isStacked: Swift.Bool {
    @objc get
  }
  @objc open var entryCountStacks: Swift.Int {
    @objc get
  }
  @objc open var stackLabels: [Swift.String]
  @objc open var barShadowColor: ChartKLineView.NSUIColor
  @objc open var barBorderWidth: CoreFoundation.CGFloat
  @objc open var barBorderColor: UIKit.UIColor
  @objc open var highlightAlpha: CoreFoundation.CGFloat
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc open class BarChartRenderer : ChartKLineView.BarLineScatterCandleBubbleRenderer {
  @objc weak open var dataProvider: (any ChartKLineView.BarChartDataProvider)?
  @objc public init(dataProvider: any ChartKLineView.BarChartDataProvider, animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc override open func initBuffers()
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc open func drawDataSet(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.IBarChartDataSet, index: Swift.Int)
  open func prepareBarHighlight(x: Swift.Double, y1: Swift.Double, y2: Swift.Double, barWidthHalf: Swift.Double, trans: ChartKLineView.Transformer, rect: inout CoreFoundation.CGRect)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc open func drawValue(context: CoreGraphics.CGContext, value: Swift.String, xPos: CoreFoundation.CGFloat, yPos: CoreFoundation.CGFloat, font: ChartKLineView.NSUIFont, align: UIKit.NSTextAlignment, color: ChartKLineView.NSUIColor)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ChartKLineView.Highlight])
  @objc open func setHighlightDrawPos(highlight high: ChartKLineView.Highlight, barRect: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BarChartView : ChartKLineView.BarLineChartViewBase, ChartKLineView.BarChartDataProvider {
  @_Concurrency.MainActor(unsafe) @objc override open func initialize()
  @_Concurrency.MainActor(unsafe) @objc override open func calcMinMax()
  @_Concurrency.MainActor(unsafe) @objc override open func getHighlightByTouchPoint(_ pt: CoreFoundation.CGPoint) -> ChartKLineView.Highlight?
  @objc @_Concurrency.MainActor(unsafe) open func getBarBounds(entry e: ChartKLineView.BarChartDataEntry) -> CoreFoundation.CGRect
  @objc @_Concurrency.MainActor(unsafe) open func groupBars(fromX: Swift.Double, groupSpace: Swift.Double, barSpace: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(x: Swift.Double, dataSetIndex: Swift.Int, stackIndex: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) open var drawValueAboveBarEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawBarShadowEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var fitBars: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var highlightFullBarEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open var isHighlightFullBarEnabled: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var barData: ChartKLineView.BarChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var isDrawValueAboveBarEnabled: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var isDrawBarShadowEnabled: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BarChartHighlighter) open class BarHighlighter : ChartKLineView.ChartHighlighter {
  @objc override open func getHighlight(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ChartKLineView.Highlight?
  @objc open func getStackedHighlight(high: ChartKLineView.Highlight, set: any ChartKLineView.IBarChartDataSet, xValue: Swift.Double, yValue: Swift.Double) -> ChartKLineView.Highlight?
  @objc open func getClosestStackIndex(ranges: [ChartKLineView.Range]?, value: Swift.Double) -> Swift.Int
  @objc override public init(chart: any ChartKLineView.ChartDataProvider)
  @objc deinit
}
@objc public protocol ChartViewCustomDrawDelegate {
  @objc optional func customDrawLocationChanged(_ location: CoreFoundation.CGPoint)
  @objc optional func customDrawActionCompleted(_ customData: ChartKLineView.CustomDrawChartData, dataSet: ChartKLineView.CustomChartDataSet)
  @objc optional func customDrawDataSetDidSelected(_ dataSet: ChartKLineView.CustomChartDataSet)
  @objc optional func customDrawDataSetDesSelected()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BarLineChartViewBase : ChartKLineView.ChartViewBase, ChartKLineView.BarLineScatterCandleBubbleChartDataProvider, ChartKLineView.NSUIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor(unsafe) open var _maxVisibleCount: Swift.Int
  @objc @_Concurrency.MainActor(unsafe) open var gridBackgroundColor: ChartKLineView.NSUIColor
  @objc @_Concurrency.MainActor(unsafe) open var borderColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var borderLineWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var drawGridBackgroundEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var drawBordersEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var clipValuesToContentEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var clipDataToContentEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var minOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var keepPositionOnRotation: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var leftAxis: ChartKLineView.YAxis
  @objc @_Concurrency.MainActor(unsafe) open var rightAxis: ChartKLineView.YAxis
  @objc @_Concurrency.MainActor(unsafe) open var leftYAxisRenderer: ChartKLineView.YAxisRenderer {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var rightYAxisRenderer: ChartKLineView.YAxisRenderer {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var _leftAxisTransformer: ChartKLineView.Transformer!
  @objc @_Concurrency.MainActor(unsafe) open var _rightAxisTransformer: ChartKLineView.Transformer!
  @objc @_Concurrency.MainActor(unsafe) open var xAxisRenderer: ChartKLineView.XAxisRenderer {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var _tapGestureRecognizer: ChartKLineView.NSUITapGestureRecognizer!
  @objc @_Concurrency.MainActor(unsafe) open var _doubleTapGestureRecognizer: ChartKLineView.NSUITapGestureRecognizer!
  @objc @_Concurrency.MainActor(unsafe) open var _pinchGestureRecognizer: ChartKLineView.NSUIPinchGestureRecognizer!
  @objc @_Concurrency.MainActor(unsafe) open var _panGestureRecognizer: ChartKLineView.NSUIPanGestureRecognizer!
  @objc @_Concurrency.MainActor(unsafe) open var drawingCustomLine: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawingDataSet: ChartKLineView.CustomChartDataSet? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var editingCustomLine: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawingEntry: ChartKLineView.CustomChartDataEntry? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var customLineData: ChartKLineView.CustomDrawChartData {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var customChartDataUndoManager: Foundation.UndoManager
  @objc @_Concurrency.MainActor(unsafe) weak open var customDrawDelegate: (any ChartKLineView.ChartViewCustomDrawDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override open func initialize()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) open func autoScale()
  @objc @_Concurrency.MainActor(unsafe) open func prepareValuePxMatrix()
  @objc @_Concurrency.MainActor(unsafe) open func prepareOffsetMatrix()
  @_Concurrency.MainActor(unsafe) @objc override open func notifyDataSetChanged()
  @_Concurrency.MainActor(unsafe) @objc override open func calcMinMax()
  @_Concurrency.MainActor(unsafe) open func calculateLegendOffsets(offsetLeft: inout CoreFoundation.CGFloat, offsetTop: inout CoreFoundation.CGFloat, offsetRight: inout CoreFoundation.CGFloat, offsetBottom: inout CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc override open func calculateOffsets()
  @objc @_Concurrency.MainActor(unsafe) open func drawGridBackground(context: CoreGraphics.CGContext)
  @objc @_Concurrency.MainActor(unsafe) open func stopDeceleration()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func gestureRecognizer(_ gestureRecognizer: ChartKLineView.NSUIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: ChartKLineView.NSUIGestureRecognizer) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open func zoomIn()
  @objc @_Concurrency.MainActor(unsafe) open func zoomOut()
  @objc @_Concurrency.MainActor(unsafe) open func resetZoom()
  @objc @_Concurrency.MainActor(unsafe) open func zoom(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func zoom(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, xValue: Swift.Double, yValue: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func zoomToCenter(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func zoomAndCenterViewAnimated(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, xValue: Swift.Double, yValue: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency, duration: Foundation.TimeInterval, easing: ChartKLineView.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func zoomAndCenterViewAnimated(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, xValue: Swift.Double, yValue: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency, duration: Foundation.TimeInterval, easingOption: ChartKLineView.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func zoomAndCenterViewAnimated(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, xValue: Swift.Double, yValue: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency, duration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) open func fitScreen()
  @objc @_Concurrency.MainActor(unsafe) open func setScaleMinima(_ scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open var visibleXRange: Swift.Double {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func setVisibleXRangeMaximum(_ maxXRange: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) open func setVisibleXRangeMinimum(_ minXRange: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) open func setVisibleXRange(minXRange: Swift.Double, maxXRange: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) open func setVisibleYRangeMaximum(_ maxYRange: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func setVisibleYRangeMinimum(_ minYRange: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func setVisibleYRange(minYRange: Swift.Double, maxYRange: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func moveViewToX(_ xValue: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) open func moveViewToY(_ yValue: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func moveViewTo(xValue: Swift.Double, yValue: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func moveViewToAnimated(xValue: Swift.Double, yValue: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency, duration: Foundation.TimeInterval, easing: ChartKLineView.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func moveViewToAnimated(xValue: Swift.Double, yValue: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency, duration: Foundation.TimeInterval, easingOption: ChartKLineView.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func moveViewToAnimated(xValue: Swift.Double, yValue: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency, duration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) open func centerViewTo(xValue: Swift.Double, yValue: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func centerViewToAnimated(xValue: Swift.Double, yValue: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency, duration: Foundation.TimeInterval, easing: ChartKLineView.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func centerViewToAnimated(xValue: Swift.Double, yValue: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency, duration: Foundation.TimeInterval, easingOption: ChartKLineView.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func centerViewToAnimated(xValue: Swift.Double, yValue: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency, duration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) open func setViewPortOffsets(left: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat, right: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func resetViewPortOffsets()
  @objc @_Concurrency.MainActor(unsafe) open func getAxisRange(axis: ChartKLineView.YAxis.AxisDependency) -> Swift.Double
  @objc @_Concurrency.MainActor(unsafe) open func getPosition(entry e: ChartKLineView.ChartDataEntry, axis: ChartKLineView.YAxis.AxisDependency) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open var dragEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDragEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var dragXEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var dragYEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setScaleEnabled(_ enabled: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open var scaleXEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var scaleYEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isScaleXEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isScaleYEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var doubleTapToZoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDoubleTapToZoomEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var highlightPerDragEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var isHighlightPerDragEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDrawGridBackgroundEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDrawBordersEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func valueForTouchPoint(point pt: CoreFoundation.CGPoint, axis: ChartKLineView.YAxis.AxisDependency) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open func pixelForValues(x: Swift.Double, y: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open func getEntryByTouchPoint(point pt: CoreFoundation.CGPoint) -> ChartKLineView.ChartDataEntry!
  @objc @_Concurrency.MainActor(unsafe) open func getDataSetByTouchPoint(point pt: CoreFoundation.CGPoint) -> (any ChartKLineView.IBarLineScatterCandleBubbleChartDataSet)?
  @objc @_Concurrency.MainActor(unsafe) open var scaleX: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var scaleY: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isFullyZoomedOut: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func getAxis(_ axis: ChartKLineView.YAxis.AxisDependency) -> ChartKLineView.YAxis
  @objc @_Concurrency.MainActor(unsafe) open var pinchZoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isPinchZoomEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func setDragOffsetX(_ offset: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func setDragOffsetY(_ offset: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open var hasNoDragOffset: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var chartYMax: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var chartYMin: Swift.Double {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isAnyAxisInverted: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var autoScaleMinMaxEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isAutoScaleMinMaxEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func setYAxisMinWidth(_ axis: ChartKLineView.YAxis.AxisDependency, width: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func getYAxisMinWidth(_ axis: ChartKLineView.YAxis.AxisDependency) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open func setYAxisMaxWidth(_ axis: ChartKLineView.YAxis.AxisDependency, width: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func getYAxisMaxWidth(_ axis: ChartKLineView.YAxis.AxisDependency) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open func getYAxisWidth(_ axis: ChartKLineView.YAxis.AxisDependency) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc open func getTransformer(forAxis axis: ChartKLineView.YAxis.AxisDependency) -> ChartKLineView.Transformer
  @_Concurrency.MainActor(unsafe) @objc override open var maxVisibleCount: Swift.Int {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc open func isInverted(axis: ChartKLineView.YAxis.AxisDependency) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open var lowestVisibleX: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var highestVisibleX: Swift.Double {
    @objc get
  }
}
extension ChartKLineView.BarLineChartViewBase {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func appendNewDrawing(dataSet: ChartKLineView.CustomChartDataSet)
  @objc @_Concurrency.MainActor(unsafe) dynamic open var touchInCustomLine: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func drawCustomLineByTouchPoint(_ pt: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) open func resetCustomHighlightByTouchPoint(_ pt: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) open func customDrawInterruptGestureWithTouchPoint(_ pt: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func customDrawInterruptPanGestureWithTouchPoint(_ pt: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func moveCustomDrawDataSet(previousPoint: CoreFoundation.CGPoint, currentPoint: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) open func moveCustomDrawDataSet(translation: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) open func performCustomDrawActionEndDelagete()
  @_Concurrency.MainActor(unsafe) open func perfromCustomDrawDataSetDidSelectedDelegate()
  @_Concurrency.MainActor(unsafe) open func perfromCustomDrawDataSetDesSelectedDelegate()
  @objc @_Concurrency.MainActor(unsafe) dynamic open func customChartDataUndo()
  @objc @_Concurrency.MainActor(unsafe) dynamic open func customChartDataRedo()
  @objc @_Concurrency.MainActor(unsafe) dynamic open var undoEnable: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var redoEnable: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open func updateCustomChartData()
  @objc @_Concurrency.MainActor(unsafe) dynamic open func removeCustomChartDataUndoState()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func nsuiTouchesBegan(_ touches: Swift.Set<ChartKLineView.NSUITouch>, withEvent event: ChartKLineView.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func nsuiTouchesMoved(_ touches: Swift.Set<ChartKLineView.NSUITouch>, withEvent event: ChartKLineView.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func nsuiTouchesEnded(_ touches: Swift.Set<ChartKLineView.NSUITouch>, withEvent event: ChartKLineView.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func nsuiTouchesCancelled(_ touches: Swift.Set<ChartKLineView.NSUITouch>?, withEvent event: ChartKLineView.NSUIEvent?)
}
@objc @_inheritsConvenienceInitializers open class BarLineScatterCandleBubbleChartData : ChartKLineView.ChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [any ChartKLineView.IChartDataSet]?)
  @objc deinit
}
@objc public protocol BarLineScatterCandleBubbleChartDataProvider : ChartKLineView.ChartDataProvider {
  @objc func getTransformer(forAxis: ChartKLineView.YAxis.AxisDependency) -> ChartKLineView.Transformer
  @objc func isInverted(axis: ChartKLineView.YAxis.AxisDependency) -> Swift.Bool
  @objc var lowestVisibleX: Swift.Double { get }
  @objc var highestVisibleX: Swift.Double { get }
}
@objc @_inheritsConvenienceInitializers open class BarLineScatterCandleBubbleChartDataSet : ChartKLineView.ChartDataSet, ChartKLineView.IBarLineScatterCandleBubbleChartDataSet {
  @objc open var highlightColor: ChartKLineView.NSUIColor
  @objc open var highlightLineWidth: CoreFoundation.CGFloat
  @objc open var highlightLineDashPhase: CoreFoundation.CGFloat
  @objc open var highlightLineDashLengths: [CoreFoundation.CGFloat]?
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc override public init(entries: [ChartKLineView.ChartDataEntry]?, label: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BarLineScatterCandleBubbleChartRenderer) open class BarLineScatterCandleBubbleRenderer : ChartKLineView.DataRenderer {
  open var _xBounds: ChartKLineView.BarLineScatterCandleBubbleRenderer.XBounds
  @objc override public init(animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc open func isInBoundsX(entry e: ChartKLineView.ChartDataEntry, dataSet: any ChartKLineView.IBarLineScatterCandleBubbleChartDataSet) -> Swift.Bool
  @objc open func shouldDrawValues(forDataSet set: any ChartKLineView.IChartDataSet) -> Swift.Bool
  open class XBounds {
    open var min: Swift.Int
    open var max: Swift.Int
    open var range: Swift.Int
    public init()
    public init(chart: any ChartKLineView.BarLineScatterCandleBubbleChartDataProvider, dataSet: any ChartKLineView.IBarLineScatterCandleBubbleChartDataSet, animator: ChartKLineView.Animator?)
    open func set(chart: any ChartKLineView.BarLineScatterCandleBubbleChartDataProvider, dataSet: any ChartKLineView.IBarLineScatterCandleBubbleChartDataSet, animator: ChartKLineView.Animator?)
    open func set(chart: any ChartKLineView.BarLineScatterCandleBubbleChartDataProvider, animator: ChartKLineView.Animator?)
    @objc deinit
  }
  @objc deinit
}
extension ChartKLineView.BarLineScatterCandleBubbleRenderer.XBounds : Swift.RangeExpression {
  public func relative<C>(to collection: C) -> Swift.Range<Swift.Int> where C : Swift.Collection, C.Index == Swift.Int
  public func contains(_ element: Swift.Int) -> Swift.Bool
  public typealias Bound = Swift.Int
}
extension ChartKLineView.BarLineScatterCandleBubbleRenderer.XBounds : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> Swift.Int?
    public typealias Element = Swift.Int
  }
  public func makeIterator() -> ChartKLineView.BarLineScatterCandleBubbleRenderer.XBounds.Iterator
  public typealias Element = Swift.Int
}
extension ChartKLineView.BarLineScatterCandleBubbleRenderer.XBounds : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BubbleChartData : ChartKLineView.BarLineScatterCandleBubbleChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [any ChartKLineView.IChartDataSet]?)
  @objc open func setHighlightCircleWidth(_ width: CoreFoundation.CGFloat)
  @objc deinit
}
@objc open class BubbleChartDataEntry : ChartKLineView.ChartDataEntry {
  @objc open var size: CoreFoundation.CGFloat
  @objc required dynamic public init()
  @objc public init(x: Swift.Double, y: Swift.Double, size: CoreFoundation.CGFloat)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, size: CoreFoundation.CGFloat, data: Any?)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, size: CoreFoundation.CGFloat, icon: ChartKLineView.NSUIImage?)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, size: CoreFoundation.CGFloat, icon: ChartKLineView.NSUIImage?, data: Any?)
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc public protocol BubbleChartDataProvider : ChartKLineView.BarLineScatterCandleBubbleChartDataProvider {
  @objc var bubbleData: ChartKLineView.BubbleChartData? { get }
}
@objc @_inheritsConvenienceInitializers open class BubbleChartDataSet : ChartKLineView.BarLineScatterCandleBubbleChartDataSet, ChartKLineView.IBubbleChartDataSet {
  @objc open var maxSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var normalizeSizeEnabled: Swift.Bool
  @objc open var isNormalizeSizeEnabled: Swift.Bool {
    @objc get
  }
  open func calcMinMax(entry e: ChartKLineView.ChartDataEntry)
  @objc open var highlightCircleWidth: CoreFoundation.CGFloat
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc override public init(entries: [ChartKLineView.ChartDataEntry]?, label: Swift.String?)
  @objc deinit
}
@objc open class BubbleChartRenderer : ChartKLineView.BarLineScatterCandleBubbleRenderer {
  @objc weak open var dataProvider: (any ChartKLineView.BubbleChartDataProvider)?
  @objc public init(dataProvider: any ChartKLineView.BubbleChartDataProvider, animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc open func drawDataSet(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.IBubbleChartDataSet, dataSetIndex: Swift.Int)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ChartKLineView.Highlight])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BubbleChartView : ChartKLineView.BarLineChartViewBase, ChartKLineView.BubbleChartDataProvider {
  @_Concurrency.MainActor(unsafe) @objc override open func initialize()
  @_Concurrency.MainActor(unsafe) @objc open var bubbleData: ChartKLineView.BubbleChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CandleChartData : ChartKLineView.BarLineScatterCandleBubbleChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [any ChartKLineView.IChartDataSet]?)
  @objc deinit
}
@objc open class CandleChartDataEntry : ChartKLineView.ChartDataEntry {
  @objc open var high: Swift.Double
  @objc open var low: Swift.Double
  @objc open var close: Swift.Double
  @objc open var open: Swift.Double
  @objc required dynamic public init()
  @objc public init(x: Swift.Double, shadowH: Swift.Double, shadowL: Swift.Double, open: Swift.Double, close: Swift.Double)
  @objc convenience public init(x: Swift.Double, shadowH: Swift.Double, shadowL: Swift.Double, open: Swift.Double, close: Swift.Double, icon: ChartKLineView.NSUIImage?)
  @objc convenience public init(x: Swift.Double, shadowH: Swift.Double, shadowL: Swift.Double, open: Swift.Double, close: Swift.Double, data: Any?)
  @objc convenience public init(x: Swift.Double, shadowH: Swift.Double, shadowL: Swift.Double, open: Swift.Double, close: Swift.Double, icon: ChartKLineView.NSUIImage?, data: Any?)
  @objc open var shadowRange: Swift.Double {
    @objc get
  }
  @objc open var bodyRange: Swift.Double {
    @objc get
  }
  @objc override open var y: Swift.Double {
    @objc get
    @objc set
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc public protocol CandleChartDataProvider : ChartKLineView.BarLineScatterCandleBubbleChartDataProvider {
  @objc var candleData: ChartKLineView.CandleChartData? { get }
}
@objc @_inheritsConvenienceInitializers open class CandleChartDataSet : ChartKLineView.LineScatterCandleRadarChartDataSet, ChartKLineView.ICandleChartDataSet {
  @objc required dynamic public init()
  @objc override public init(entries: [ChartKLineView.ChartDataEntry]?, label: Swift.String?)
  open func calcMinMax(entry e: ChartKLineView.ChartDataEntry)
  @objc override open func calcMinMaxY(entry e: ChartKLineView.ChartDataEntry)
  @objc open var barSpace: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc open var showCandleBar: Swift.Bool
  @objc open var shadowWidth: CoreFoundation.CGFloat
  @objc open var shadowColor: ChartKLineView.NSUIColor?
  @objc open var shadowColorSameAsCandle: Swift.Bool
  @objc open var isShadowColorSameAsCandle: Swift.Bool {
    @objc get
  }
  @objc open var neutralColor: ChartKLineView.NSUIColor?
  @objc open var increasingColor: ChartKLineView.NSUIColor?
  @objc open var decreasingColor: ChartKLineView.NSUIColor?
  @objc open var increasingFilled: Swift.Bool
  @objc open var isIncreasingFilled: Swift.Bool {
    @objc get
  }
  @objc open var decreasingFilled: Swift.Bool
  @objc open var isDecreasingFilled: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class CandleStickChartRenderer : ChartKLineView.LineScatterCandleRadarRenderer {
  @objc weak open var dataProvider: (any ChartKLineView.CandleChartDataProvider)?
  @objc public init(dataProvider: any ChartKLineView.CandleChartDataProvider, animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc open func drawDataSet(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ICandleChartDataSet)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ChartKLineView.Highlight])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CandleStickChartView : ChartKLineView.BarLineChartViewBase, ChartKLineView.CandleChartDataProvider {
  @_Concurrency.MainActor(unsafe) @objc override open func initialize()
  @_Concurrency.MainActor(unsafe) @objc open var candleData: ChartKLineView.CandleChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension ChartKLineView.ViewPortHandler {
  @objc dynamic open var maxScale: Swift.Int {
    @objc get
    @objc set
  }
  @objc dynamic open var landScapeMode: ChartKLineView.LandScapeMode {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic open var preClose: Swift.Float {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic open var drawMarket: ChartKLineView.StockDrawType {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic open var lineType: ChartKLineView.LineType {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic open var isIndex: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic open var shouldLocalFormat: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
}
extension ChartKLineView.ChartLimitLine {
  @objc dynamic open var drawLineEnable: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
}
extension ChartKLineView.ChartDataEntry {
  @objc dynamic open var buy: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var sell: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var warning: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var volume: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var action: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var timestamp: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic open var tradeMark: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic open var actionType: Swift.Int {
    @objc get
    @objc set
  }
  @objc dynamic open var actionDes: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic open var magicPoint: Swift.Int {
    @objc get
    @objc set
  }
}
extension ChartKLineView.CandleChartDataSet {
  @objc dynamic open var drawJump: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var drawAction: Swift.Bool {
    @objc get
    @objc set
  }
}
extension ChartKLineView.YAxis {
  @objc dynamic open var numberFormatter: Foundation.NumberFormatter {
    @objc get
    @objc set
  }
  @objc dynamic open var showOnlyMinMaxEnabled: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
}
extension ChartKLineView.ChartDataSet {
  @objc dynamic open var numberFormatter: Foundation.NumberFormatter {
    @objc get
    @objc set
  }
  @objc dynamic open var dataSetCountDiff: Swift.Double {
    @objc get
    @objc set
  }
}
extension ChartKLineView.XAxis {
  @objc dynamic open var xAxisValues: [Swift.String] {
    @objc get
    @objc set(newValue)
  }
}
extension ChartKLineView.BarLineChartViewBase {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var isDrawContinue: Swift.Bool {
    @objc get
    @objc set
  }
}
extension UIKit.UIFont {
  @objc dynamic public class func tb_numberFont(ofSize: CoreFoundation.CGFloat) -> UIKit.UIFont
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func getRight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public func getLeft() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public func getWidth() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public func getHeight() -> CoreFoundation.CGFloat
}
@objc public enum ChartEasingOption : Swift.Int {
  case linear
  case easeInQuad
  case easeOutQuad
  case easeInOutQuad
  case easeInCubic
  case easeOutCubic
  case easeInOutCubic
  case easeInQuart
  case easeOutQuart
  case easeInOutQuart
  case easeInQuint
  case easeOutQuint
  case easeInOutQuint
  case easeInSine
  case easeOutSine
  case easeInOutSine
  case easeInExpo
  case easeOutExpo
  case easeInOutExpo
  case easeInCirc
  case easeOutCirc
  case easeInOutCirc
  case easeInElastic
  case easeOutElastic
  case easeInOutElastic
  case easeInBack
  case easeOutBack
  case easeInOutBack
  case easeInBounce
  case easeOutBounce
  case easeInOutBounce
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias ChartEasingFunctionBlock = ((_ elapsed: Foundation.TimeInterval, _ duration: Foundation.TimeInterval) -> Swift.Double)
@objc @_inheritsConvenienceInitializers open class ChartBaseDataSet : ObjectiveC.NSObject, ChartKLineView.IChartDataSet, Foundation.NSCopying {
  @objc required override dynamic public init()
  @objc public init(label: Swift.String?)
  @objc open func notifyDataSetChanged()
  @objc open func calcMinMax()
  @objc open func calcMinMaxY(fromX: Swift.Double, toX: Swift.Double)
  @objc open var yMin: Swift.Double {
    @objc get
  }
  @objc open var yMax: Swift.Double {
    @objc get
  }
  @objc open var xMin: Swift.Double {
    @objc get
  }
  @objc open var xMax: Swift.Double {
    @objc get
  }
  @objc open var entryCount: Swift.Int {
    @objc get
  }
  @objc open func entryForIndex(_ i: Swift.Int) -> ChartKLineView.ChartDataEntry?
  @objc open func entryForXValue(_ x: Swift.Double, closestToY y: Swift.Double, rounding: ChartKLineView.ChartDataSetRounding) -> ChartKLineView.ChartDataEntry?
  @objc open func entryForXValue(_ x: Swift.Double, closestToY y: Swift.Double) -> ChartKLineView.ChartDataEntry?
  @objc open func entriesForXValue(_ x: Swift.Double) -> [ChartKLineView.ChartDataEntry]
  @objc open func entryIndex(x xValue: Swift.Double, closestToY y: Swift.Double, rounding: ChartKLineView.ChartDataSetRounding) -> Swift.Int
  @objc open func entryIndex(entry e: ChartKLineView.ChartDataEntry) -> Swift.Int
  @objc open func addEntry(_ e: ChartKLineView.ChartDataEntry) -> Swift.Bool
  @objc open func addEntryOrdered(_ e: ChartKLineView.ChartDataEntry) -> Swift.Bool
  @discardableResult
  @objc open func removeEntry(_ entry: ChartKLineView.ChartDataEntry) -> Swift.Bool
  @discardableResult
  @objc open func removeEntry(index: Swift.Int) -> Swift.Bool
  @discardableResult
  @objc open func removeEntry(x: Swift.Double) -> Swift.Bool
  @discardableResult
  @objc open func removeFirst() -> Swift.Bool
  @discardableResult
  @objc open func removeLast() -> Swift.Bool
  @objc open func contains(_ e: ChartKLineView.ChartDataEntry) -> Swift.Bool
  @objc open func clear()
  @objc open var colors: [ChartKLineView.NSUIColor]
  @objc open var valueColors: [ChartKLineView.NSUIColor]
  @objc open var label: Swift.String?
  @objc open var axisDependency: ChartKLineView.YAxis.AxisDependency
  @objc open func color(atIndex index: Swift.Int) -> ChartKLineView.NSUIColor
  @objc open func resetColors()
  @objc open func addColor(_ color: ChartKLineView.NSUIColor)
  @objc open func setColor(_ color: ChartKLineView.NSUIColor)
  @objc open func setColor(_ color: ChartKLineView.NSUIColor, alpha: CoreFoundation.CGFloat)
  @objc open func setColors(_ colors: [ChartKLineView.NSUIColor], alpha: CoreFoundation.CGFloat)
  open func setColors(_ colors: ChartKLineView.NSUIColor...)
  @objc open var highlightEnabled: Swift.Bool
  @objc open var isHighlightEnabled: Swift.Bool {
    @objc get
  }
  @objc open var valueFormatter: (any ChartKLineView.IValueFormatter)? {
    @objc get
    @objc set
  }
  @objc open var needsFormatter: Swift.Bool {
    @objc get
  }
  @objc open var valueTextColor: ChartKLineView.NSUIColor {
    @objc get
    @objc set
  }
  @objc open func valueTextColorAt(_ index: Swift.Int) -> ChartKLineView.NSUIColor
  @objc open var valueFont: UIKit.UIFont
  @objc open var form: ChartKLineView.Legend.Form
  @objc open var formSize: CoreFoundation.CGFloat
  @objc open var formLineWidth: CoreFoundation.CGFloat
  @objc open var formLineDashPhase: CoreFoundation.CGFloat
  @objc open var formLineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var drawValuesEnabled: Swift.Bool
  @objc open var isDrawValuesEnabled: Swift.Bool {
    @objc get
  }
  @objc open var drawIconsEnabled: Swift.Bool
  @objc open var isDrawIconsEnabled: Swift.Bool {
    @objc get
  }
  @objc open var iconsOffset: CoreFoundation.CGPoint
  @objc open var visible: Swift.Bool
  @objc open var isVisible: Swift.Bool {
    @objc get
  }
  @objc open var animateXEnable: Swift.Bool
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override dynamic open var debugDescription: Swift.String {
    @objc get
  }
  @objc open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ChartColorTemplates : ObjectiveC.NSObject {
  @objc open class func liberty() -> [ChartKLineView.NSUIColor]
  @objc open class func joyful() -> [ChartKLineView.NSUIColor]
  @objc open class func pastel() -> [ChartKLineView.NSUIColor]
  @objc open class func colorful() -> [ChartKLineView.NSUIColor]
  @objc open class func vordiplom() -> [ChartKLineView.NSUIColor]
  @objc open class func material() -> [ChartKLineView.NSUIColor]
  @objc open class func colorFromString(_ colorString: Swift.String) -> ChartKLineView.NSUIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ChartData : ObjectiveC.NSObject {
  public var _yMax: Swift.Double
  public var _yMin: Swift.Double
  public var _xMax: Swift.Double
  public var _xMin: Swift.Double
  public var _leftAxisMax: Swift.Double
  public var _leftAxisMin: Swift.Double
  public var _rightAxisMax: Swift.Double
  public var _rightAxisMin: Swift.Double
  public var _dataSets: [any ChartKLineView.IChartDataSet]
  @objc override dynamic public init()
  @objc public init(dataSets: [any ChartKLineView.IChartDataSet]?)
  @objc convenience public init(dataSet: (any ChartKLineView.IChartDataSet)?)
  @objc open func notifyDataChanged()
  @objc open func calcMinMaxY(fromX: Swift.Double, toX: Swift.Double)
  @objc open func calcMinMax()
  @objc open func calcMinMax(entry e: ChartKLineView.ChartDataEntry, axis: ChartKLineView.YAxis.AxisDependency)
  @objc open func calcMinMax(dataSet d: any ChartKLineView.IChartDataSet)
  @objc open var dataSetCount: Swift.Int {
    @objc get
  }
  @objc open var yMin: Swift.Double {
    @objc get
  }
  @nonobjc open func getYMin() -> Swift.Double
  @objc open func getYMin(axis: ChartKLineView.YAxis.AxisDependency) -> Swift.Double
  @objc open var yMax: Swift.Double {
    @objc get
  }
  @nonobjc open func getYMax() -> Swift.Double
  @objc open func getYMax(axis: ChartKLineView.YAxis.AxisDependency) -> Swift.Double
  @objc open var xMin: Swift.Double {
    @objc get
  }
  @objc open var xMax: Swift.Double {
    @objc get
  }
  @objc open var dataSets: [any ChartKLineView.IChartDataSet] {
    @objc get
    @objc set
  }
  @objc open func entryForHighlight(_ highlight: ChartKLineView.Highlight) -> ChartKLineView.ChartDataEntry?
  @objc open func getDataSetByLabel(_ label: Swift.String, ignorecase: Swift.Bool) -> (any ChartKLineView.IChartDataSet)?
  @objc open func getDataSetByIndex(_ index: Swift.Int) -> (any ChartKLineView.IChartDataSet)!
  @objc open func addDataSet(_ dataSet: (any ChartKLineView.IChartDataSet)!)
  @discardableResult
  @objc open func removeDataSet(_ dataSet: any ChartKLineView.IChartDataSet) -> Swift.Bool
  @discardableResult
  @objc open func removeDataSetByIndex(_ index: Swift.Int) -> Swift.Bool
  @objc open func addEntry(_ e: ChartKLineView.ChartDataEntry, dataSetIndex: Swift.Int)
  @discardableResult
  @objc open func removeEntry(_ entry: ChartKLineView.ChartDataEntry, dataSetIndex: Swift.Int) -> Swift.Bool
  @discardableResult
  @objc open func removeEntry(xValue: Swift.Double, dataSetIndex: Swift.Int) -> Swift.Bool
  @objc open func getDataSetForEntry(_ e: ChartKLineView.ChartDataEntry) -> (any ChartKLineView.IChartDataSet)?
  @objc open func indexOfDataSet(_ dataSet: any ChartKLineView.IChartDataSet) -> Swift.Int
  @objc open func getFirstLeft(dataSets: [any ChartKLineView.IChartDataSet]) -> (any ChartKLineView.IChartDataSet)?
  @objc open func getFirstRight(dataSets: [any ChartKLineView.IChartDataSet]) -> (any ChartKLineView.IChartDataSet)?
  @objc open func getColors() -> [ChartKLineView.NSUIColor]?
  @objc open func setValueFormatter(_ formatter: any ChartKLineView.IValueFormatter)
  @objc open func setValueTextColor(_ color: ChartKLineView.NSUIColor)
  @objc open func setValueFont(_ font: ChartKLineView.NSUIFont)
  @objc open func setDrawValues(_ enabled: Swift.Bool)
  @objc open var highlightEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var isHighlightEnabled: Swift.Bool {
    @objc get
  }
  @objc open func clearValues()
  @objc open func contains(dataSet: any ChartKLineView.IChartDataSet) -> Swift.Bool
  @objc open var entryCount: Swift.Int {
    @objc get
  }
  @objc open var maxEntryCountSet: (any ChartKLineView.IChartDataSet)? {
    @objc get
  }
  @objc open var drawMaxMinValueEnabled: Foundation.NSNumber?
  @objc open var accessibilityEntryLabelPrefix: Swift.String?
  @objc open var accessibilityEntryLabelSuffix: Swift.String?
  @objc open var accessibilityEntryLabelSuffixIsCount: Swift.Bool
  @objc deinit
}
@objc open class ChartDataEntry : ChartKLineView.ChartDataEntryBase, Foundation.NSCopying {
  @objc open var x: Swift.Double
  @objc required dynamic public init()
  @objc public init(x: Swift.Double, y: Swift.Double)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, data: Any?)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, icon: ChartKLineView.NSUIImage?)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, icon: ChartKLineView.NSUIImage?, data: Any?)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension ChartKLineView.ChartDataEntry {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChartKLineView.ChartDataEntry {
  open func changeValue(with x: Swift.Double, y: Swift.Double)
  open func resetValue(with x: Swift.Double, y: Swift.Double)
}
@objc @_inheritsConvenienceInitializers open class ChartDataEntryBase : ObjectiveC.NSObject {
  @objc open var y: Swift.Double
  @objc open var data: Any?
  @objc open var icon: ChartKLineView.NSUIImage?
  @objc override required dynamic public init()
  @objc public init(y: Swift.Double)
  @objc convenience public init(y: Swift.Double, data: Any?)
  @objc convenience public init(y: Swift.Double, icon: ChartKLineView.NSUIImage?)
  @objc convenience public init(y: Swift.Double, icon: ChartKLineView.NSUIImage?, data: Any?)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension ChartKLineView.ChartDataEntryBase {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
}
@objc public protocol ChartDataProvider {
  @objc var chartXMin: Swift.Double { get }
  @objc var chartXMax: Swift.Double { get }
  @objc var chartYMin: Swift.Double { get }
  @objc var chartYMax: Swift.Double { get }
  @objc var maxHighlightDistance: CoreFoundation.CGFloat { get }
  @objc var xRange: Swift.Double { get }
  @objc var centerOffsets: CoreFoundation.CGPoint { get }
  @objc var data: ChartKLineView.ChartData? { get }
  @objc var maxVisibleCount: Swift.Int { get }
}
@objc(ChartDataRendererBase) open class DataRenderer : ChartKLineView.Renderer {
  @objc final public let animator: ChartKLineView.Animator
  @objc public init(animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc open func drawData(context: CoreGraphics.CGContext)
  @objc open func drawValues(context: CoreGraphics.CGContext)
  @objc open func drawExtras(context: CoreGraphics.CGContext)
  @objc open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ChartKLineView.Highlight])
  @objc open func initBuffers()
  @objc open func isDrawingValuesAllowed(dataProvider: (any ChartKLineView.ChartDataProvider)?) -> Swift.Bool
  @objc open func createAccessibleHeader(usingChart chart: ChartKLineView.ChartViewBase, andData data: ChartKLineView.ChartData, withDefaultDescription defaultDescription: Swift.String = "Chart") -> ChartKLineView.NSUIAccessibilityElement
  @objc deinit
}
@objc public enum ChartDataSetRounding : Swift.Int {
  case up = 0
  case down = 1
  case closest = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class ChartDataSet : ChartKLineView.ChartBaseDataSet {
  @objc required dynamic public init()
  @objc override convenience public init(label: Swift.String?)
  @objc public init(entries: [ChartKLineView.ChartDataEntry]?, label: Swift.String?)
  @objc convenience public init(entries: [ChartKLineView.ChartDataEntry]?)
  @available(*, unavailable, renamed: "entries")
  @objc open var values: [ChartKLineView.ChartDataEntry] {
    @objc get
  }
  @objc open var entries: [ChartKLineView.ChartDataEntry] {
    get
  }
  @objc public func replaceEntries(_ entries: [ChartKLineView.ChartDataEntry])
  @objc override open func calcMinMax()
  @objc override open func calcMinMaxY(fromX: Swift.Double, toX: Swift.Double)
  @objc open func calcMinMaxX(entry e: ChartKLineView.ChartDataEntry)
  @objc open func calcMinMaxY(entry e: ChartKLineView.ChartDataEntry)
  @objc override open var yMin: Swift.Double {
    @objc get
  }
  @objc override open var yMax: Swift.Double {
    @objc get
  }
  @objc override open var xMin: Swift.Double {
    @objc get
  }
  @objc override open var xMax: Swift.Double {
    @objc get
  }
  @available(*, deprecated, message: "Use `count` instead")
  @objc override open var entryCount: Swift.Int {
    @objc get
  }
  @available(*, deprecated, message: "Use `subscript(index:)` instead.")
  @objc override open func entryForIndex(_ i: Swift.Int) -> ChartKLineView.ChartDataEntry?
  @objc override open func entryForXValue(_ xValue: Swift.Double, closestToY yValue: Swift.Double, rounding: ChartKLineView.ChartDataSetRounding) -> ChartKLineView.ChartDataEntry?
  @objc override open func entryForXValue(_ xValue: Swift.Double, closestToY yValue: Swift.Double) -> ChartKLineView.ChartDataEntry?
  @objc override open func entriesForXValue(_ xValue: Swift.Double) -> [ChartKLineView.ChartDataEntry]
  @objc override open func entryIndex(x xValue: Swift.Double, closestToY yValue: Swift.Double, rounding: ChartKLineView.ChartDataSetRounding) -> Swift.Int
  @available(*, deprecated, message: "Use `firstIndex(of:)` or `lastIndex(of:)`")
  @objc override open func entryIndex(entry e: ChartKLineView.ChartDataEntry) -> Swift.Int
  @available(*, deprecated, message: "Use `append(_:)` instead")
  @objc override open func addEntry(_ e: ChartKLineView.ChartDataEntry) -> Swift.Bool
  @objc override open func addEntryOrdered(_ e: ChartKLineView.ChartDataEntry) -> Swift.Bool
  @available(*, renamed: "remove(_:)")
  @objc override open func removeEntry(_ entry: ChartKLineView.ChartDataEntry) -> Swift.Bool
  open func remove(_ entry: ChartKLineView.ChartDataEntry) -> Swift.Bool
  @available(*, deprecated, message: "Use `func removeFirst() -> ChartDataEntry` instead.")
  @objc override open func removeFirst() -> Swift.Bool
  @available(*, deprecated, message: "Use `func removeLast() -> ChartDataEntry` instead.")
  @objc override open func removeLast() -> Swift.Bool
  @available(*, deprecated, message: "Use `removeAll(keepingCapacity:)` instead.")
  @objc override open func clear()
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension ChartKLineView.ChartDataSet : Swift.MutableCollection {
  public typealias Index = Swift.Int
  public typealias Element = ChartKLineView.ChartDataEntry
  public var startIndex: ChartKLineView.ChartDataSet.Index {
    get
  }
  public var endIndex: ChartKLineView.ChartDataSet.Index {
    get
  }
  public func index(after: ChartKLineView.ChartDataSet.Index) -> ChartKLineView.ChartDataSet.Index
  @objc dynamic public subscript(position: ChartKLineView.ChartDataSet.Index) -> ChartKLineView.ChartDataSet.Element {
    @objc get
    @objc set
  }
  public typealias Indices = Swift.Range<ChartKLineView.ChartDataSet.Index>
  public typealias Iterator = Swift.IndexingIterator<ChartKLineView.ChartDataSet>
  public typealias SubSequence = Swift.Slice<ChartKLineView.ChartDataSet>
}
extension ChartKLineView.ChartDataSet : Swift.RandomAccessCollection {
  public func index(before: ChartKLineView.ChartDataSet.Index) -> ChartKLineView.ChartDataSet.Index
}
extension ChartKLineView.ChartDataSet : Swift.RangeReplaceableCollection {
  public func replaceSubrange<C>(_ subrange: Swift.Range<ChartKLineView.ChartDataSet.Index>, with newElements: C) where C : Swift.Collection, C.Element == ChartKLineView.ChartDataEntry
  public func append(_ newElement: ChartKLineView.ChartDataSet.Element)
  public func remove(at position: ChartKLineView.ChartDataSet.Index) -> ChartKLineView.ChartDataSet.Element
  public func removeFirst() -> ChartKLineView.ChartDataSet.Element
  public func removeFirst(_ n: Swift.Int)
  public func removeLast() -> ChartKLineView.ChartDataSet.Element
  public func removeLast(_ n: Swift.Int)
  public func removeSubrange<R>(_ bounds: R) where R : Swift.RangeExpression, R.Bound == Swift.Int
  @objc dynamic public func removeAll(keepingCapacity keepCapacity: Swift.Bool)
}
extension ChartKLineView.ChartDataSet {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
}
@objc(TBLandScapeMode) public enum LandScapeMode : Swift.Int {
  case Portrait
  case LandScape
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(TBStockStrategyType) public enum StockStrategyType : Swift.Int {
  case None
  case ZigZag
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(TBChartDrawMarketType) public enum StockDrawType : Swift.Int {
  case Common
  case US
  case HK
  case CN
  case Option
  case OptionDefault
  case PreMarket
  case SufMarket
  case Futures
  case UK
  case AStockSufMarket
  case SI
  case AU
  case NZ
  case DigitalCurrency
  case USTotalMarket
  case Bond
  case Bonds
  case Forex
  case OverNight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(TBLineType) public enum LineType : Swift.Int {
  case Trend1Minute
  case Candle1Minute
  case Candle3Minute
  case Candle5Minute
  case Candle10Minute
  case Candle15Minute
  case Candle30Minute
  case Candle45Minute
  case Candle1Hour
  case Candle2Hour
  case Candle3Hour
  case Candle4Hour
  case Candle6Hour
  case Candle1Day
  case Candle1Week
  case Candle1Month
  case Candle1Year
  case All
  case RealTime1Day
  case RealTime5Day
  case PeriodOneMonthCandle1Hour
  case PeriodThreeMonthCandle1Day
  case PeriodSixMonthCandle1Day
  case PeriodThisYearCandle1Week
  case PeriodOneYearCandle1Week
  case PeriodFiveYearCandle1Month
  case Candle2Minute
  case Candle1Quarter
  case BondOneMonth
  case BondThreeMonth
  case BondOneYear
  case BondThreeYear
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(TBKLineChartYAxisType) public enum YAxisType : Swift.Int {
  case MA
  case BOLL
  case EMA
  case SAR
  case TCTI
  case BBI
  case HMA
  case LMA
  case VMA
  case BBIBOLL
  case ALLIGAT
  case PBX
  case ENE
  case MIKE
  case XT
  case JAX
  case VOLUME
  case MACD
  case KDJ
  case RSI
  case ARBR
  case OBV
  case DMI
  case WR
  case EMV
  case DMA
  case CCI
  case MFI
  case LINE
  case COMPARE
  case ATR
  case TRIX
  case OIV
  case VR
  case TPXH
  case MACDKDJ
  case BIAS
  case DKX
  case PCNT
  case ROC
  case SKDJ
  case UDL
  case VRSI
  case WAD
  case XS
  case IV
  case OPENINT
  case None
  case ZigZag
  case MTM
  case ADTM
  case CR
  case WVAD
  case UnChecked
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(TCTILengendShape) public enum TCTIShape : Swift.Int {
  case square
  case circle
  case triangle
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class ChartHighlighter : ObjectiveC.NSObject, ChartKLineView.IHighlighter {
  @objc weak open var chart: (any ChartKLineView.ChartDataProvider)?
  @objc public init(chart: any ChartKLineView.ChartDataProvider)
  @objc open func getHighlight(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ChartKLineView.Highlight?
  @objc open func getValsForTouch(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  @objc open func getHighlight(xValue xVal: Swift.Double, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ChartKLineView.Highlight?
  @objc open func getHighlights(xValue: Swift.Double, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> [ChartKLineView.Highlight]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ChartLimitLine : ChartKLineView.ComponentBase {
  @objc(ChartLimitLabelPosition) public enum LabelPosition : Swift.Int {
    case topLeft
    case topRight
    case bottomLeft
    case bottomRight
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc open var limit: Swift.Double
  @objc open var lineColor: ChartKLineView.NSUIColor
  @objc open var lineDashPhase: CoreFoundation.CGFloat
  @objc open var lineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var valueTextColor: UIKit.UIColor
  @objc open var valueFont: UIKit.UIFont
  @objc open var drawLabelEnabled: Swift.Bool
  @objc open var label: Swift.String
  @objc open var labelPosition: ChartKLineView.ChartLimitLine.LabelPosition
  @objc override dynamic public init()
  @objc public init(limit: Swift.Double)
  @objc public init(limit: Swift.Double, label: Swift.String)
  @objc open var lineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc deinit
}
extension Swift.FloatingPoint {
  public var DEG2RAD: Self {
    get
  }
  public var RAD2DEG: Self {
    get
  }
}
extension Swift.Double {
  public func roundedToNextSignficant() -> Swift.Double
  public var decimalPlaces: Swift.Int {
    get
  }
  public func clamped(to range: ChartKLineView.Range) -> Swift.Double
}
extension CoreFoundation.CGPoint {
  public func moving(distance: CoreFoundation.CGFloat, atAngle angle: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  public func distance(with point: CoreFoundation.CGPoint) -> CoreFoundation.CGFloat
  public func getExtendPointBy(_ anotherPoint: CoreFoundation.CGPoint, xRange: ChartKLineView.Range, yRange: ChartKLineView.Range) -> CoreFoundation.CGPoint
  public var chartDataEntry: ChartKLineView.ChartDataEntry {
    get
  }
  public func getArrowPointsWith(_ endPoint: CoreFoundation.CGPoint) -> (CoreFoundation.CGPoint, CoreFoundation.CGPoint)
}
@_hasMissingDesignatedInitializers open class ChartUtils {
  open class func drawImage(context: CoreGraphics.CGContext, image: ChartKLineView.NSUIImage, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, size: CoreFoundation.CGSize)
  open class func drawText(context: CoreGraphics.CGContext, text: Swift.String, point: CoreFoundation.CGPoint, align: UIKit.NSTextAlignment, attributes: [Foundation.NSAttributedString.Key : Any]?)
  open class func drawText(context: CoreGraphics.CGContext, text: Swift.String, point: CoreFoundation.CGPoint, attributes: [Foundation.NSAttributedString.Key : Any]?, anchor: CoreFoundation.CGPoint, angleRadians: CoreFoundation.CGFloat)
  open class func drawMultilineText(context: CoreGraphics.CGContext, text: Swift.String, knownTextSize: CoreFoundation.CGSize, point: CoreFoundation.CGPoint, attributes: [Foundation.NSAttributedString.Key : Any]?, constrainedToSize: CoreFoundation.CGSize, anchor: CoreFoundation.CGPoint, angleRadians: CoreFoundation.CGFloat)
  open class func defaultValueFormatter() -> any ChartKLineView.IValueFormatter
  @objc deinit
}
extension CoreGraphics.CGContext {
  public func generatePathWithRect(rect: CoreFoundation.CGRect, radius: CoreFoundation.CGFloat)
}
@objc public protocol ChartViewDelegate {
  @objc optional func chartValueSelected(_ chartView: ChartKLineView.ChartViewBase, entry: ChartKLineView.ChartDataEntry, highlight: ChartKLineView.Highlight)
  @objc optional func chartViewDidEndPanning(_ chartView: ChartKLineView.ChartViewBase)
  @objc optional func chartViewBeginPanning(_ chartView: ChartKLineView.ChartViewBase)
  @objc optional func chartValueNothingSelected(_ chartView: ChartKLineView.ChartViewBase)
  @objc optional func chartScaled(_ chartView: ChartKLineView.ChartViewBase, scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat)
  @objc optional func chartTranslated(_ chartView: ChartKLineView.ChartViewBase, dX: CoreFoundation.CGFloat, dY: CoreFoundation.CGFloat)
  @objc optional func chartView(_ chartView: ChartKLineView.ChartViewBase, animatorDidStop animator: ChartKLineView.Animator)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ChartViewBase : ChartKLineView.NSUIView, ChartKLineView.ChartDataProvider, ChartKLineView.AnimatorDelegate {
  @objc @_Concurrency.MainActor(unsafe) open var xAxis: ChartKLineView.XAxis {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var _data: ChartKLineView.ChartData?
  @objc @_Concurrency.MainActor(unsafe) open var dragDecelerationEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var _xAxis: ChartKLineView.XAxis!
  @objc @_Concurrency.MainActor(unsafe) open var chartDescription: ChartKLineView.Description?
  @objc @_Concurrency.MainActor(unsafe) open var _legend: ChartKLineView.Legend!
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ChartKLineView.ChartViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var noDataText: Swift.String
  @objc @_Concurrency.MainActor(unsafe) open var noDataFont: UIKit.UIFont
  @objc @_Concurrency.MainActor(unsafe) open var noDataTextColor: ChartKLineView.NSUIColor
  @objc @_Concurrency.MainActor(unsafe) open var noDataTextAlignment: UIKit.NSTextAlignment
  @objc @_Concurrency.MainActor(unsafe) open var _legendRenderer: ChartKLineView.LegendRenderer!
  @objc @_Concurrency.MainActor(unsafe) open var renderer: ChartKLineView.DataRenderer?
  @objc @_Concurrency.MainActor(unsafe) open var highlighter: (any ChartKLineView.IHighlighter)?
  @objc @_Concurrency.MainActor(unsafe) open var _viewPortHandler: ChartKLineView.ViewPortHandler!
  @objc @_Concurrency.MainActor(unsafe) open var _animator: ChartKLineView.Animator!
  @objc @_Concurrency.MainActor(unsafe) open var _indicesToHighlight: [ChartKLineView.Highlight]
  @objc @_Concurrency.MainActor(unsafe) open var drawMarkers: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var isDrawMarkersEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var marker: (any ChartKLineView.IMarker)?
  @objc @_Concurrency.MainActor(unsafe) open var extraTopOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var extraRightOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var extraBottomOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var extraLeftOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open func setExtraOffsets(left: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat, right: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func initialize()
  @_Concurrency.MainActor(unsafe) @objc open var data: ChartKLineView.ChartData? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func clear()
  @objc @_Concurrency.MainActor(unsafe) open func clearValues()
  @objc @_Concurrency.MainActor(unsafe) open func isEmpty() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open func notifyDataSetChanged()
  @objc @_Concurrency.MainActor(unsafe) open func calculateOffsets()
  @objc @_Concurrency.MainActor(unsafe) open func calcMinMax()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) open func drawDescription(context: CoreGraphics.CGContext)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityChildren() -> [Any]?
  @objc @_Concurrency.MainActor(unsafe) open var highlighted: [ChartKLineView.Highlight] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var highlightPerTapEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isHighLightPerTapEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func valuesToHighlight() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open func highlightValues(_ highs: [ChartKLineView.Highlight]?)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(x: Swift.Double, dataSetIndex: Swift.Int, dataIndex: Swift.Int = -1)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(x: Swift.Double, y: Swift.Double, dataSetIndex: Swift.Int, dataIndex: Swift.Int = -1)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(x: Swift.Double, dataSetIndex: Swift.Int, dataIndex: Swift.Int = -1, callDelegate: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(x: Swift.Double, y: Swift.Double, dataSetIndex: Swift.Int, dataIndex: Swift.Int = -1, callDelegate: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(_ highlight: ChartKLineView.Highlight?)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(_ highlight: ChartKLineView.Highlight?, callDelegate: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func getHighlightByTouchPoint(_ pt: CoreFoundation.CGPoint) -> ChartKLineView.Highlight?
  @objc @_Concurrency.MainActor(unsafe) open var lastHighlighted: ChartKLineView.Highlight?
  @objc @_Concurrency.MainActor(unsafe) open func drawMarkers(context: CoreGraphics.CGContext)
  @objc @_Concurrency.MainActor(unsafe) open func getMarkerPosition(highlight: ChartKLineView.Highlight) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open var chartAnimator: ChartKLineView.Animator! {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easingX: ChartKLineView.ChartEasingFunctionBlock?, easingY: ChartKLineView.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easingOptionX: ChartKLineView.ChartEasingOption, easingOptionY: ChartKLineView.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easing: ChartKLineView.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easingOption: ChartKLineView.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, easing: ChartKLineView.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, easingOption: ChartKLineView.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) open func animate(yAxisDuration: Foundation.TimeInterval, easing: ChartKLineView.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func animate(yAxisDuration: Foundation.TimeInterval, easingOption: ChartKLineView.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func animate(yAxisDuration: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc open var chartYMax: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var chartYMin: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var chartXMax: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var chartXMin: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var xRange: Swift.Double {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var midPoint: CoreFoundation.CGPoint {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var centerOffsets: CoreFoundation.CGPoint {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var legend: ChartKLineView.Legend {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var legendRenderer: ChartKLineView.LegendRenderer! {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var contentRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var viewPortHandler: ChartKLineView.ViewPortHandler! {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func getChartImage(transparent: Swift.Bool) -> ChartKLineView.NSUIImage?
  public enum ImageFormat {
    case jpeg
    case png
    public static func == (a: ChartKLineView.ChartViewBase.ImageFormat, b: ChartKLineView.ChartViewBase.ImageFormat) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) open func save(to path: Swift.String, format: ChartKLineView.ChartViewBase.ImageFormat, compressionQuality: Swift.Double) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc @_Concurrency.MainActor(unsafe) open func removeViewportJob(_ job: ChartKLineView.ViewPortJob)
  @objc @_Concurrency.MainActor(unsafe) open func clearAllViewportJobs()
  @objc @_Concurrency.MainActor(unsafe) open func addViewportJob(_ job: ChartKLineView.ViewPortJob)
  @objc @_Concurrency.MainActor(unsafe) open var isDragDecelerationEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var dragDecelerationFrictionCoef: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc open var maxHighlightDistance: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc open var maxVisibleCount: Swift.Int {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open func animatorUpdated(_ chartAnimator: ChartKLineView.Animator)
  @_Concurrency.MainActor(unsafe) @objc open func animatorStopped(_ chartAnimator: ChartKLineView.Animator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func nsuiTouchesBegan(_ touches: Swift.Set<ChartKLineView.NSUITouch>, withEvent event: ChartKLineView.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func nsuiTouchesMoved(_ touches: Swift.Set<ChartKLineView.NSUITouch>, withEvent event: ChartKLineView.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func nsuiTouchesEnded(_ touches: Swift.Set<ChartKLineView.NSUITouch>, withEvent event: ChartKLineView.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func nsuiTouchesCancelled(_ touches: Swift.Set<ChartKLineView.NSUITouch>?, withEvent event: ChartKLineView.NSUIEvent?)
}
@objc @_inheritsConvenienceInitializers open class ChevronDownShapeRenderer : ObjectiveC.NSObject, ChartKLineView.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.IScatterChartDataSet, viewPortHandler: ChartKLineView.ViewPortHandler, point: CoreFoundation.CGPoint, color: ChartKLineView.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ChevronUpShapeRenderer : ObjectiveC.NSObject, ChartKLineView.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.IScatterChartDataSet, viewPortHandler: ChartKLineView.ViewPortHandler, point: CoreFoundation.CGPoint, color: ChartKLineView.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CircleShapeRenderer : ObjectiveC.NSObject, ChartKLineView.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.IScatterChartDataSet, viewPortHandler: ChartKLineView.ViewPortHandler, point: CoreFoundation.CGPoint, color: ChartKLineView.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CombinedChartData : ChartKLineView.BarLineScatterCandleBubbleChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [any ChartKLineView.IChartDataSet]?)
  @objc open var lineData: ChartKLineView.LineChartData! {
    @objc get
    @objc set
  }
  @objc open var barData: ChartKLineView.BarChartData! {
    @objc get
    @objc set
  }
  @objc open var scatterData: ChartKLineView.ScatterChartData! {
    @objc get
    @objc set
  }
  @objc open var candleData: ChartKLineView.CandleChartData! {
    @objc get
    @objc set
  }
  @objc open var bubbleData: ChartKLineView.BubbleChartData! {
    @objc get
    @objc set
  }
  @objc open var customDrawData: ChartKLineView.CustomDrawChartData! {
    @objc get
    @objc set
  }
  @objc open var compareData: ChartKLineView.LineChartData! {
    @objc get
    @objc set
  }
  @objc override open func calcMinMax()
  @objc open var allData: [ChartKLineView.ChartData] {
    @objc get
  }
  @objc open var allCalculateData: [ChartKLineView.ChartData] {
    @objc get
  }
  @objc open func dataByIndex(_ index: Swift.Int) -> ChartKLineView.ChartData
  open func dataIndex(_ data: ChartKLineView.ChartData) -> Swift.Int?
  @objc override open func removeDataSet(_ dataSet: any ChartKLineView.IChartDataSet) -> Swift.Bool
  @objc override open func removeDataSetByIndex(_ index: Swift.Int) -> Swift.Bool
  @objc override open func removeEntry(_ entry: ChartKLineView.ChartDataEntry, dataSetIndex: Swift.Int) -> Swift.Bool
  @objc override open func removeEntry(xValue: Swift.Double, dataSetIndex: Swift.Int) -> Swift.Bool
  @objc override open func notifyDataChanged()
  @objc override open func entryForHighlight(_ highlight: ChartKLineView.Highlight) -> ChartKLineView.ChartDataEntry?
  @objc open func getDataSetByHighlight(_ highlight: ChartKLineView.Highlight) -> (any ChartKLineView.IChartDataSet)!
  @objc deinit
}
@objc public protocol CombinedChartDataProvider : ChartKLineView.BarChartDataProvider, ChartKLineView.BubbleChartDataProvider, ChartKLineView.CandleChartDataProvider, ChartKLineView.CompareChartDataProvider, ChartKLineView.CustomDrawChartDataProvider, ChartKLineView.LineChartDataProvider, ChartKLineView.ScatterChartDataProvider {
  @objc var combinedData: ChartKLineView.CombinedChartData? { get }
}
@objc open class CombinedChartRenderer : ChartKLineView.DataRenderer {
  @objc weak open var chart: ChartKLineView.CombinedChartView?
  @objc open var drawValueAboveBarEnabled: Swift.Bool
  @objc open var drawBarShadowEnabled: Swift.Bool
  public var _renderers: [ChartKLineView.DataRenderer]
  public var _drawOrder: [ChartKLineView.CombinedChartView.DrawOrder]
  @objc public init(chart: ChartKLineView.CombinedChartView, animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc open func createRenderers()
  @objc override open func initBuffers()
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ChartKLineView.Highlight])
  @objc open func getSubRenderer(index: Swift.Int) -> ChartKLineView.DataRenderer?
  @objc open var subRenderers: [ChartKLineView.DataRenderer] {
    @objc get
    @objc set
  }
  @objc open var isDrawValueAboveBarEnabled: Swift.Bool {
    @objc get
  }
  @objc open var isDrawBarShadowEnabled: Swift.Bool {
    @objc get
  }
  open var drawOrder: [ChartKLineView.CombinedChartView.DrawOrder] {
    get
    set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CombinedChartView : ChartKLineView.BarLineChartViewBase, ChartKLineView.CombinedChartDataProvider {
  @objc(CombinedChartDrawOrder) public enum DrawOrder : Swift.Int {
    case bar
    case bubble
    case line
    case candle
    case scatter
    case custom
    case compare
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) @objc override open func initialize()
  @_Concurrency.MainActor(unsafe) @objc override open var data: ChartKLineView.ChartData? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var fillFormatter: any ChartKLineView.IFillFormatter {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override open func getHighlightByTouchPoint(_ pt: CoreFoundation.CGPoint) -> ChartKLineView.Highlight?
  @_Concurrency.MainActor(unsafe) @objc open var combinedData: ChartKLineView.CombinedChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var lineData: ChartKLineView.LineChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var barData: ChartKLineView.BarChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var scatterData: ChartKLineView.ScatterChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var candleData: ChartKLineView.CandleChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var bubbleData: ChartKLineView.BubbleChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var customDrawData: ChartKLineView.CustomDrawChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var compareData: ChartKLineView.LineChartData? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawValueAboveBarEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawBarShadowEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc open var isDrawValueAboveBarEnabled: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var isDrawBarShadowEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawOrder: [Swift.Int] {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var highlightFullBarEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open var isHighlightFullBarEnabled: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func drawMarkers(context: CoreGraphics.CGContext)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc(CombinedChartHighlighter) open class CombinedHighlighter : ChartKLineView.ChartHighlighter {
  @objc public init(chart: any ChartKLineView.CombinedChartDataProvider, barDataProvider: any ChartKLineView.BarChartDataProvider)
  @objc override open func getHighlights(xValue: Swift.Double, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> [ChartKLineView.Highlight]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class CompareChartDataEntry : ChartKLineView.ChartDataEntry {
  @objc open var compareY: Swift.Double
  @objc public init(x: Swift.Double, y: Swift.Double, compareY: Swift.Double)
  @objc required dynamic public init()
  @objc deinit
}
@objc public protocol CompareChartDataProvider : ChartKLineView.BarLineScatterCandleBubbleChartDataProvider {
  @objc var compareData: ChartKLineView.LineChartData? { get }
}
@objc @_inheritsConvenienceInitializers open class CompareLineChartDataSet : ChartKLineView.LineChartDataSet {
  @objc open var drawScale: Swift.Double
  @objc open var indexValueMap: [Swift.Int : ChartKLineView.ChartDataEntry]
  @objc override public init(entries: [ChartKLineView.ChartDataEntry]?, label: Swift.String?)
  @objc convenience public init(compareEntries: [ChartKLineView.CompareChartDataEntry]?, label: Swift.String?)
  @objc convenience public init(compareEntries: [ChartKLineView.CompareChartDataEntry]?)
  @objc required dynamic public init()
  @objc override open func entryForIndex(_ i: Swift.Int) -> ChartKLineView.ChartDataEntry?
  @objc override open func calcMinMaxY(entry e: ChartKLineView.ChartDataEntry)
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartComponentBase) open class ComponentBase : ObjectiveC.NSObject {
  @objc open var enabled: Swift.Bool
  @objc open var xOffset: CoreFoundation.CGFloat
  @objc open var yOffset: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc open var isEnabled: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CrossShapeRenderer : ObjectiveC.NSObject, ChartKLineView.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.IScatterChartDataSet, viewPortHandler: ChartKLineView.ViewPortHandler, point: CoreFoundation.CGPoint, color: ChartKLineView.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CustomChartDataEntry : ChartKLineView.ChartDataEntry {
  @objc open var hidingEnable: Swift.Bool
  public var combinedEntry: ChartKLineView.ChartDataEntry?
  @objc required dynamic public init()
  @objc override public init(x: Swift.Double, y: Swift.Double)
  @objc public init(hidingEntry x: Swift.Double, y: Swift.Double)
  @objc public init(data: [Swift.String : Any])
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CustomChartDataSet : ChartKLineView.LineChartDataSet, ChartKLineView.ICustomChartDataSet {
  @objc open var customDrawLineType: ChartKLineView.CustomDrawLineType
  @objc open var customDrawLineStyle: ChartKLineView.CustomDrawLineStyle
  @objc open var customDrawColorString: Swift.String
  @objc open var customDrawSelected: Swift.Bool
  @objc open var customDrawMagnetEnable: Swift.Bool
  @objc open var customDrawLinePaths: [UIKit.UIBezierPath]
  @objc open var customDrawRelationKlineType: ChartKLineView.LineType
  @objc open var customDrawDisplayKlineType: ChartKLineView.LineType
  @objc open var customDrawAddTimeStamp: Swift.Double
  @objc open var customDrawDisplayTimeZoneID: Swift.String?
  @objc required dynamic public init()
  @objc override public init(entries: [ChartKLineView.ChartDataEntry]?, label: Swift.String?)
  @objc convenience public init(drawLineType: ChartKLineView.CustomDrawLineType, entries: [ChartKLineView.CustomChartDataEntry]?)
  @objc public init(data: [Swift.String : Any])
  @objc override open var lineDashLengths: [CoreFoundation.CGFloat]? {
    @objc get
    @objc set
  }
  @objc override open var circleHoleRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc override open var circleRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension ChartKLineView.CustomChartDataSet : ChartKLineView.ICustomChartDataSetDraw {
  open func addCustomEntry(entry: ChartKLineView.CustomChartDataEntry?)
  open func completeCurrentCustomDrawing() -> Swift.Bool
  open func supplyGraphicsPoints()
  open func generateDisplayEntries(xRange: ChartKLineView.Range, yRange: ChartKLineView.Range)
  open func calculateMagnetEntry(entry: ChartKLineView.CustomChartDataEntry?, changeValueDiff: Swift.Double)
  open func correctOtherPointsBy(entry: ChartKLineView.CustomChartDataEntry?)
}
extension ChartKLineView.CustomChartDataSet : ChartKLineView.ICustomChartDataSetInfo {
  @objc dynamic open var customDrawColor: ChartKLineView.NSUIColor {
    @objc get
  }
  @objc dynamic open var customDrawTranslateMap: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic open var remainPointCount: Swift.Int {
    @objc get
  }
  @objc dynamic open var compeletedPointCount: Swift.Int {
    @objc get
  }
  @objc dynamic open var displayKlineTypeTimeDistance: Swift.Double {
    @objc get
  }
  @objc dynamic open var displayKlineTypeDateFormat: Swift.String {
    @objc get
  }
}
extension ChartKLineView.CustomChartDataSet : ChartKLineView.ICustomChartDataSetLocation {
  public func getEntryBy(touchPoint: CoreFoundation.CGPoint, maxXDiffValue: CoreFoundation.CGFloat, maxYDiffValue: CoreFoundation.CGFloat) -> ChartKLineView.CustomChartDataEntry?
  public func calculatePositionInGraphicsBy(touchPoint: CoreFoundation.CGPoint) -> Swift.Bool
}
extension ChartKLineView.CustomChartDataSet : ChartKLineView.ICustomChartDataSetMove {
  public func totalGraphicstMoveBy(with translation: CoreFoundation.CGPoint)
  public func singleEntryMoveBy(editEntry: ChartKLineView.CustomChartDataEntry?, translation: CoreFoundation.CGPoint)
  public func appendClosedGraphicsPathLocation(entries: [ChartKLineView.ChartDataEntry])
  public func appendSinglePathLocation(points: [CoreFoundation.CGPoint], maxDiffValue: CoreFoundation.CGFloat)
  public func clearPathLocation()
}
@objc open class CustomChartRenderer : ChartKLineView.LineRadarRenderer {
  @objc weak open var dataProvider: (any ChartKLineView.CustomDrawChartDataProvider)?
  @objc public init(dataProvider: any ChartKLineView.CustomDrawChartDataProvider, animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  open func drawCustomeDataSet(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ICustomChartDataSet)
  open func drawCustomHighlight(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ICustomChartDataSet)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc deinit
}
extension ChartKLineView.CustomChartRenderer {
  open func transEntryToValuePoint(entry: ChartKLineView.ChartDataEntry?, axisDependency: ChartKLineView.YAxis.AxisDependency = .left) -> CoreFoundation.CGPoint
  open func xRangeForCurrentChart(dataSet: ChartKLineView.CustomChartDataSet) -> ChartKLineView.Range
  open func yRangeForCurrentChart(dataSet: ChartKLineView.CustomChartDataSet) -> ChartKLineView.Range
  open func drawBaseCircel(context: CoreGraphics.CGContext, dataSet: ChartKLineView.CustomChartDataSet, beginEntry: ChartKLineView.ChartDataEntry)
  open func drawBaseAlphaPath(context: CoreGraphics.CGContext, dataSet: ChartKLineView.CustomChartDataSet)
  open func drawBaseLineSegment(context: CoreGraphics.CGContext, dataSet: ChartKLineView.CustomChartDataSet, beginEntry: ChartKLineView.ChartDataEntry, endEntry: ChartKLineView.ChartDataEntry)
  open func drawBaseClosedGraphics(context: CoreGraphics.CGContext, dataSet: ChartKLineView.CustomChartDataSet, entries: [ChartKLineView.ChartDataEntry])
  open func drawBaseLineStraight(context: CoreGraphics.CGContext, dataSet: ChartKLineView.CustomChartDataSet, beginEntry: ChartKLineView.ChartDataEntry, endEntry: ChartKLineView.ChartDataEntry)
  open func drawBaseLineDotted(context: CoreGraphics.CGContext, dataSet: ChartKLineView.CustomChartDataSet, beginEntry: ChartKLineView.ChartDataEntry, endEntry: ChartKLineView.ChartDataEntry)
  open func drawBaseLineVertical(context: CoreGraphics.CGContext, dataSet: ChartKLineView.CustomChartDataSet, beginEntry: ChartKLineView.ChartDataEntry)
  open func drawBaseLineHorizontal(context: CoreGraphics.CGContext, dataSet: ChartKLineView.CustomChartDataSet, beginEntry: ChartKLineView.ChartDataEntry)
  open func drawBaseLineArrow(context: CoreGraphics.CGContext, dataSet: ChartKLineView.CustomChartDataSet, beginEntry: ChartKLineView.ChartDataEntry, endEntry: ChartKLineView.ChartDataEntry)
  open func drawBaseLinePrice(context: CoreGraphics.CGContext, dataSet: ChartKLineView.CustomChartDataSet, beginEntry: ChartKLineView.ChartDataEntry)
  open func drawBaseLineDate(context: CoreGraphics.CGContext, dataSet: ChartKLineView.CustomChartDataSet, beginEntry: ChartKLineView.ChartDataEntry)
}
extension ChartKLineView.CustomChartRenderer {
  open func drawDataSetLineSegment(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ICustomChartDataSet)
  open func drawStraightLine(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ICustomChartDataSet)
  open func drawVerticalLine(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ICustomChartDataSet)
  open func drawClosedGraphics(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ICustomChartDataSet)
  open func drawRgressionLine(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ICustomChartDataSet)
  open func drawFibonacciPeriodLine(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ICustomChartDataSet)
  open func drawHorizontalLine(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ICustomChartDataSet)
  open func drawRangeStatisticLine(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ICustomChartDataSet)
}
@objc @_inheritsConvenienceInitializers open class CustomDrawChartData : ChartKLineView.ChartData {
  public var saveDataSets: [any ChartKLineView.IChartDataSet]
  @objc override dynamic public init()
  @objc override public init(dataSets: [any ChartKLineView.IChartDataSet]?)
  @objc override open func addDataSet(_ dataSet: (any ChartKLineView.IChartDataSet)!)
  @objc public var customDrawData: [[Swift.String : Any]] {
    @objc get
  }
  @objc public func generateDispalyDataSets()
  public func removeDataSetsUndoState()
  @objc public func updateDataSets(customDataSets: [any ChartKLineView.IChartDataSet])
  public func undo()
  public func redo()
  public var undoEnable: Swift.Bool {
    get
  }
  public var redoEnable: Swift.Bool {
    get
  }
  @objc deinit
}
@objc public protocol CustomDrawChartDataProvider : ChartKLineView.BarLineScatterCandleBubbleChartDataProvider {
  @objc var customDrawData: ChartKLineView.CustomDrawChartData? { get }
}
@_inheritsConvenienceInitializers @objc(ChartDataApproximator) open class DataApproximator : ObjectiveC.NSObject {
  @objc open class func reduceWithDouglasPeuker(_ points: [CoreFoundation.CGPoint], tolerance: CoreFoundation.CGFloat) -> [CoreFoundation.CGPoint]
  open class func reduceWithDouglasPeuker(points: [CoreFoundation.CGPoint], tolerance: CoreFoundation.CGFloat, start: Swift.Int, end: Swift.Int, keep: inout [Swift.Bool])
  @objc override dynamic public init()
  @objc deinit
}
extension ChartKLineView.DataApproximator {
  @objc dynamic open class func reduceWithDouglasPeukerN(_ points: [CoreFoundation.CGPoint], resultCount: Swift.Int) -> [CoreFoundation.CGPoint]
}
@_inheritsConvenienceInitializers @objc(ChartDefaultAxisValueFormatter) open class DefaultAxisValueFormatter : ObjectiveC.NSObject, ChartKLineView.IAxisValueFormatter {
  public typealias Block = (_ value: Swift.Double, _ axis: ChartKLineView.AxisBase?) -> Swift.String
  @objc open var block: ChartKLineView.DefaultAxisValueFormatter.Block?
  @objc open var hasAutoDecimals: Swift.Bool
  @objc open var formatter: Foundation.NumberFormatter? {
    @objc get
    @objc set
  }
  open var decimals: Swift.Int? {
    get
    set
  }
  @objc override dynamic public init()
  @objc public init(formatter: Foundation.NumberFormatter)
  @objc public init(decimals: Swift.Int)
  @objc public init(block: @escaping ChartKLineView.DefaultAxisValueFormatter.Block)
  @objc public static func with(block: @escaping ChartKLineView.DefaultAxisValueFormatter.Block) -> ChartKLineView.DefaultAxisValueFormatter?
  @objc open func stringForValue(_ value: Swift.Double, axis: ChartKLineView.AxisBase?) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartDefaultFillFormatter) open class DefaultFillFormatter : ObjectiveC.NSObject, ChartKLineView.IFillFormatter {
  public typealias Block = (_ dataSet: any ChartKLineView.ILineChartDataSet, _ dataProvider: any ChartKLineView.LineChartDataProvider) -> CoreFoundation.CGFloat
  @objc open var block: ChartKLineView.DefaultFillFormatter.Block?
  @objc override dynamic public init()
  @objc public init(block: @escaping ChartKLineView.DefaultFillFormatter.Block)
  @objc public static func with(block: @escaping ChartKLineView.DefaultFillFormatter.Block) -> ChartKLineView.DefaultFillFormatter?
  @objc open func getFillLinePosition(dataSet: any ChartKLineView.ILineChartDataSet, dataProvider: any ChartKLineView.LineChartDataProvider) -> CoreFoundation.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartDefaultValueFormatter) open class DefaultValueFormatter : ObjectiveC.NSObject, ChartKLineView.IValueFormatter {
  public typealias Block = (_ value: Swift.Double, _ entry: ChartKLineView.ChartDataEntry, _ dataSetIndex: Swift.Int, _ viewPortHandler: ChartKLineView.ViewPortHandler?) -> Swift.String
  @objc open var block: ChartKLineView.DefaultValueFormatter.Block?
  @objc open var hasAutoDecimals: Swift.Bool
  @objc open var formatter: Foundation.NumberFormatter? {
    @objc get
    @objc set
  }
  open var decimals: Swift.Int? {
    get
    set
  }
  @objc override dynamic public init()
  @objc public init(formatter: Foundation.NumberFormatter)
  @objc public init(decimals: Swift.Int)
  @objc public init(block: @escaping ChartKLineView.DefaultValueFormatter.Block)
  @objc public static func with(block: @escaping ChartKLineView.DefaultValueFormatter.Block) -> ChartKLineView.DefaultValueFormatter?
  @objc open func stringForValue(_ value: Swift.Double, entry: ChartKLineView.ChartDataEntry, dataSetIndex: Swift.Int, viewPortHandler: ChartKLineView.ViewPortHandler?) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartDescription) open class Description : ChartKLineView.ComponentBase {
  @objc override dynamic public init()
  @objc open var text: Swift.String?
  open var position: CoreFoundation.CGPoint?
  @objc open var textAlign: UIKit.NSTextAlignment
  @objc open var font: ChartKLineView.NSUIFont
  @objc open var textColor: UIKit.UIColor
  @objc deinit
}
@objc open class Entry : ObjectiveC.NSObject {
  open var object: [Swift.Double]?
  open var resultDict: [Swift.String : Swift.Bool]
  open var decorations: [ChartKLineView.TBDecoration] {
    get
    set
  }
  open func is_result(_ name: Swift.String) -> Swift.Bool
  open func set_is_result(_ name: Swift.String)
  open var isResult: Swift.Bool {
    get
    set
  }
  public init(object: [Swift.Double])
  public func getEntry() -> Any
  public func isConstant() -> Swift.Bool
  public func isVarName() -> Swift.Bool
  public func isResults() -> Swift.Bool
  @objc deinit
}
@objc(ChartFillType) public enum FillType : Swift.Int {
  case empty
  case color
  case linearGradient
  case radialGradient
  case image
  case tiledImage
  case layer
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(ChartFill) open class Fill : ObjectiveC.NSObject {
  @objc open var type: ChartKLineView.FillType {
    @objc get
  }
  @objc open var color: CoreGraphics.CGColor? {
    @objc get
  }
  @objc open var gradient: CoreGraphics.CGGradient? {
    @objc get
  }
  @objc open var gradientAngle: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var gradientStartOffsetPercent: CoreFoundation.CGPoint {
    @objc get
  }
  @objc open var gradientStartRadiusPercent: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var gradientEndOffsetPercent: CoreFoundation.CGPoint {
    @objc get
  }
  @objc open var gradientEndRadiusPercent: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var image: CoreGraphics.CGImage? {
    @objc get
  }
  @objc open var layer: CoreGraphics.CGLayer? {
    @objc get
  }
  @objc override dynamic public init()
  @objc public init(CGColor: CoreGraphics.CGColor)
  @objc convenience public init(color: ChartKLineView.NSUIColor)
  @objc public init(linearGradient: CoreGraphics.CGGradient, angle: CoreFoundation.CGFloat)
  @objc public init(radialGradient: CoreGraphics.CGGradient, startOffsetPercent: CoreFoundation.CGPoint, startRadiusPercent: CoreFoundation.CGFloat, endOffsetPercent: CoreFoundation.CGPoint, endRadiusPercent: CoreFoundation.CGFloat)
  @objc convenience public init(radialGradient: CoreGraphics.CGGradient)
  @objc public init(CGImage: CoreGraphics.CGImage, tiled: Swift.Bool)
  @objc convenience public init(image: ChartKLineView.NSUIImage, tiled: Swift.Bool)
  @objc convenience public init(CGImage: CoreGraphics.CGImage)
  @objc convenience public init(image: ChartKLineView.NSUIImage)
  @objc public init(CGLayer: CoreGraphics.CGLayer)
  @objc open class func fillWithCGColor(_ CGColor: CoreGraphics.CGColor) -> ChartKLineView.Fill
  @objc open class func fillWithColor(_ color: ChartKLineView.NSUIColor) -> ChartKLineView.Fill
  @objc open class func fillWithLinearGradient(_ linearGradient: CoreGraphics.CGGradient, angle: CoreFoundation.CGFloat) -> ChartKLineView.Fill
  @objc open class func fillWithRadialGradient(_ radialGradient: CoreGraphics.CGGradient, startOffsetPercent: CoreFoundation.CGPoint, startRadiusPercent: CoreFoundation.CGFloat, endOffsetPercent: CoreFoundation.CGPoint, endRadiusPercent: CoreFoundation.CGFloat) -> ChartKLineView.Fill
  @objc open class func fillWithRadialGradient(_ radialGradient: CoreGraphics.CGGradient) -> ChartKLineView.Fill
  @objc open class func fillWithCGImage(_ CGImage: CoreGraphics.CGImage, tiled: Swift.Bool) -> ChartKLineView.Fill
  @objc open class func fillWithImage(_ image: ChartKLineView.NSUIImage, tiled: Swift.Bool) -> ChartKLineView.Fill
  @objc open class func fillWithCGImage(_ CGImage: CoreGraphics.CGImage) -> ChartKLineView.Fill
  @objc open class func fillWithImage(_ image: ChartKLineView.NSUIImage) -> ChartKLineView.Fill
  @objc open class func fillWithCGLayer(_ CGLayer: CoreGraphics.CGLayer) -> ChartKLineView.Fill
  @objc open func fillPath(context: CoreGraphics.CGContext, rect: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartHighlight) open class Highlight : ObjectiveC.NSObject {
  @objc open var dataIndex: Swift.Int
  @objc open var drawX: CoreFoundation.CGFloat
  @objc open var drawY: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc public init(x: Swift.Double, y: Swift.Double, xPx: CoreFoundation.CGFloat, yPx: CoreFoundation.CGFloat, dataIndex: Swift.Int, dataSetIndex: Swift.Int, stackIndex: Swift.Int, axis: ChartKLineView.YAxis.AxisDependency)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, xPx: CoreFoundation.CGFloat, yPx: CoreFoundation.CGFloat, dataSetIndex: Swift.Int, stackIndex: Swift.Int, axis: ChartKLineView.YAxis.AxisDependency)
  @objc public init(x: Swift.Double, y: Swift.Double, xPx: CoreFoundation.CGFloat, yPx: CoreFoundation.CGFloat, dataSetIndex: Swift.Int, axis: ChartKLineView.YAxis.AxisDependency)
  @objc public init(x: Swift.Double, y: Swift.Double, dataSetIndex: Swift.Int, dataIndex: Swift.Int = -1)
  @objc convenience public init(x: Swift.Double, dataSetIndex: Swift.Int, stackIndex: Swift.Int)
  @objc open var x: Swift.Double {
    @objc get
  }
  @objc open var y: Swift.Double {
    @objc get
  }
  @objc open var xPx: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var yPx: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var dataSetIndex: Swift.Int {
    @objc get
  }
  @objc open var stackIndex: Swift.Int {
    @objc get
  }
  @objc open var axis: ChartKLineView.YAxis.AxisDependency {
    @objc get
  }
  @objc open var isStacked: Swift.Bool {
    @objc get
  }
  @objc open func setDraw(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @objc open func setDraw(pt: CoreFoundation.CGPoint)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension ChartKLineView.Highlight {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class HorizontalBarChartRenderer : ChartKLineView.BarChartRenderer {
  @objc override public init(dataProvider: any ChartKLineView.BarChartDataProvider, animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc override open func initBuffers()
  @objc override open func drawDataSet(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.IBarChartDataSet, index: Swift.Int)
  override open func prepareBarHighlight(x: Swift.Double, y1: Swift.Double, y2: Swift.Double, barWidthHalf: Swift.Double, trans: ChartKLineView.Transformer, rect: inout CoreFoundation.CGRect)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func isDrawingValuesAllowed(dataProvider: (any ChartKLineView.ChartDataProvider)?) -> Swift.Bool
  @objc override open func setHighlightDrawPos(highlight high: ChartKLineView.Highlight, barRect: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class HorizontalBarChartView : ChartKLineView.BarChartView {
  @_Concurrency.MainActor(unsafe) @objc override open func initialize()
  @_Concurrency.MainActor(unsafe) override open func calculateLegendOffsets(offsetLeft: inout CoreFoundation.CGFloat, offsetTop: inout CoreFoundation.CGFloat, offsetRight: inout CoreFoundation.CGFloat, offsetBottom: inout CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc override open func calculateOffsets()
  @_Concurrency.MainActor(unsafe) @objc override open func prepareValuePxMatrix()
  @_Concurrency.MainActor(unsafe) @objc override open func getMarkerPosition(highlight: ChartKLineView.Highlight) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) @objc override open func getBarBounds(entry e: ChartKLineView.BarChartDataEntry) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override open func getPosition(entry e: ChartKLineView.ChartDataEntry, axis: ChartKLineView.YAxis.AxisDependency) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) @objc override open func getHighlightByTouchPoint(_ pt: CoreFoundation.CGPoint) -> ChartKLineView.Highlight?
  @_Concurrency.MainActor(unsafe) @objc override open var lowestVisibleX: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var highestVisibleX: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func setVisibleXRangeMaximum(_ maxXRange: Swift.Double)
  @_Concurrency.MainActor(unsafe) @objc override open func setVisibleXRangeMinimum(_ minXRange: Swift.Double)
  @_Concurrency.MainActor(unsafe) @objc override open func setVisibleXRange(minXRange: Swift.Double, maxXRange: Swift.Double)
  @_Concurrency.MainActor(unsafe) @objc override open func setVisibleYRangeMaximum(_ maxYRange: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency)
  @_Concurrency.MainActor(unsafe) @objc override open func setVisibleYRangeMinimum(_ minYRange: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency)
  @_Concurrency.MainActor(unsafe) @objc override open func setVisibleYRange(minYRange: Swift.Double, maxYRange: Swift.Double, axis: ChartKLineView.YAxis.AxisDependency)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(HorizontalBarChartHighlighter) open class HorizontalBarHighlighter : ChartKLineView.BarHighlighter {
  @objc override open func getHighlight(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ChartKLineView.Highlight?
  @objc override public init(chart: any ChartKLineView.ChartDataProvider)
  @objc deinit
}
@objc(IChartAxisValueFormatter) public protocol IAxisValueFormatter {
  @objc func stringForValue(_ value: Swift.Double, axis: ChartKLineView.AxisBase?) -> Swift.String
}
@objc public protocol IBarChartDataSet : ChartKLineView.IBarLineScatterCandleBubbleChartDataSet {
  @objc var isStacked: Swift.Bool { get }
  @objc var stackSize: Swift.Int { get }
  @objc var barShadowColor: ChartKLineView.NSUIColor { get set }
  @objc var barBorderWidth: CoreFoundation.CGFloat { get set }
  @objc var barBorderColor: ChartKLineView.NSUIColor { get set }
  @objc var highlightAlpha: CoreFoundation.CGFloat { get set }
  @objc var stackLabels: [Swift.String] { get set }
}
@objc public protocol IBarLineScatterCandleBubbleChartDataSet : ChartKLineView.IChartDataSet {
  @objc var highlightColor: ChartKLineView.NSUIColor { get set }
  @objc var highlightLineWidth: CoreFoundation.CGFloat { get set }
  @objc var highlightLineDashPhase: CoreFoundation.CGFloat { get set }
  @objc var highlightLineDashLengths: [CoreFoundation.CGFloat]? { get set }
}
@objc public protocol IBubbleChartDataSet : ChartKLineView.IBarLineScatterCandleBubbleChartDataSet {
  @objc var maxSize: CoreFoundation.CGFloat { get }
  @objc var isNormalizeSizeEnabled: Swift.Bool { get }
  @objc var highlightCircleWidth: CoreFoundation.CGFloat { get set }
}
@objc public protocol ICandleChartDataSet : ChartKLineView.ILineScatterCandleRadarChartDataSet {
  @objc var barSpace: CoreFoundation.CGFloat { get set }
  @objc var showCandleBar: Swift.Bool { get set }
  @objc var shadowWidth: CoreFoundation.CGFloat { get set }
  @objc var shadowColor: ChartKLineView.NSUIColor? { get set }
  @objc var shadowColorSameAsCandle: Swift.Bool { get set }
  @objc var isShadowColorSameAsCandle: Swift.Bool { get }
  @objc var neutralColor: ChartKLineView.NSUIColor? { get set }
  @objc var increasingColor: ChartKLineView.NSUIColor? { get set }
  @objc var decreasingColor: ChartKLineView.NSUIColor? { get set }
  @objc var increasingFilled: Swift.Bool { get set }
  @objc var isIncreasingFilled: Swift.Bool { get }
  @objc var decreasingFilled: Swift.Bool { get set }
  @objc var isDecreasingFilled: Swift.Bool { get }
}
@objc public protocol IChartDataSet {
  @objc func notifyDataSetChanged()
  @objc func calcMinMax()
  @objc func calcMinMaxY(fromX: Swift.Double, toX: Swift.Double)
  @objc var yMin: Swift.Double { get }
  @objc var yMax: Swift.Double { get }
  @objc var xMin: Swift.Double { get }
  @objc var xMax: Swift.Double { get }
  @objc var entryCount: Swift.Int { get }
  @objc func entryForIndex(_ i: Swift.Int) -> ChartKLineView.ChartDataEntry?
  @objc func entryForXValue(_ xValue: Swift.Double, closestToY yValue: Swift.Double, rounding: ChartKLineView.ChartDataSetRounding) -> ChartKLineView.ChartDataEntry?
  @objc func entryForXValue(_ xValue: Swift.Double, closestToY yValue: Swift.Double) -> ChartKLineView.ChartDataEntry?
  @objc func entriesForXValue(_ xValue: Swift.Double) -> [ChartKLineView.ChartDataEntry]
  @objc func entryIndex(x xValue: Swift.Double, closestToY yValue: Swift.Double, rounding: ChartKLineView.ChartDataSetRounding) -> Swift.Int
  @objc func entryIndex(entry e: ChartKLineView.ChartDataEntry) -> Swift.Int
  @objc func addEntry(_ e: ChartKLineView.ChartDataEntry) -> Swift.Bool
  @objc func addEntryOrdered(_ e: ChartKLineView.ChartDataEntry) -> Swift.Bool
  @objc func removeEntry(_ entry: ChartKLineView.ChartDataEntry) -> Swift.Bool
  @objc func removeEntry(index: Swift.Int) -> Swift.Bool
  @objc func removeEntry(x: Swift.Double) -> Swift.Bool
  @objc func removeFirst() -> Swift.Bool
  @objc func removeLast() -> Swift.Bool
  @objc func contains(_ e: ChartKLineView.ChartDataEntry) -> Swift.Bool
  @objc func clear()
  @objc var label: Swift.String? { get }
  @objc var axisDependency: ChartKLineView.YAxis.AxisDependency { get }
  @objc var valueColors: [ChartKLineView.NSUIColor] { get }
  @objc var colors: [ChartKLineView.NSUIColor] { get }
  @objc func color(atIndex: Swift.Int) -> ChartKLineView.NSUIColor
  @objc func resetColors()
  @objc func addColor(_ color: ChartKLineView.NSUIColor)
  @objc func setColor(_ color: ChartKLineView.NSUIColor)
  @objc var highlightEnabled: Swift.Bool { get set }
  @objc var isHighlightEnabled: Swift.Bool { get }
  @objc var valueFormatter: (any ChartKLineView.IValueFormatter)? { get set }
  @objc var needsFormatter: Swift.Bool { get }
  @objc var valueTextColor: ChartKLineView.NSUIColor { get set }
  @objc func valueTextColorAt(_ index: Swift.Int) -> ChartKLineView.NSUIColor
  @objc var valueFont: ChartKLineView.NSUIFont { get set }
  @objc var form: ChartKLineView.Legend.Form { get }
  @objc var formSize: CoreFoundation.CGFloat { get }
  @objc var formLineWidth: CoreFoundation.CGFloat { get }
  @objc var formLineDashPhase: CoreFoundation.CGFloat { get }
  @objc var formLineDashLengths: [CoreFoundation.CGFloat]? { get }
  @objc var drawValuesEnabled: Swift.Bool { get set }
  @objc var isDrawValuesEnabled: Swift.Bool { get }
  @objc var drawIconsEnabled: Swift.Bool { get set }
  @objc var isDrawIconsEnabled: Swift.Bool { get }
  @objc var iconsOffset: CoreFoundation.CGPoint { get set }
  @objc var visible: Swift.Bool { get set }
  @objc var isVisible: Swift.Bool { get }
  @objc var animateXEnable: Swift.Bool { get set }
}
@objc public enum CustomDrawLineType : Swift.Int {
  case lineStraight = 0
  case lineSegment
  case rectangle
  case lineVertical
  case lineHorizontal
  case lineRgression
  case lineFibonacciPeriod
  case lineRangeStatistic
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CustomCalculatePathType {
  case singleLine
  case extendLine
  case multiLine
  case closed
  public static func == (a: ChartKLineView.CustomCalculatePathType, b: ChartKLineView.CustomCalculatePathType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum CustomDrawLineStyle : Swift.Int {
  case lineSolid = 0
  case lineSolidArrow
  case lineSolidLeftArrow
  case lineSolidRightArrow
  case lineDotted
  case lineDottedArrow
  case lineDottedLeftArrow
  case lineDottedRightArrow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CustomDrawArrowStyle {
  case left
  case right
  case both
  case none
  public static func == (a: ChartKLineView.CustomDrawArrowStyle, b: ChartKLineView.CustomDrawArrowStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ICustomChartDataSet : ChartKLineView.ICustomChartDataSetDraw, ChartKLineView.ICustomChartDataSetInfo, ChartKLineView.ICustomChartDataSetLocation, ChartKLineView.ICustomChartDataSetMove, ChartKLineView.ILineChartDataSet {
  var customDrawLineType: ChartKLineView.CustomDrawLineType { get set }
  var customDrawLineStyle: ChartKLineView.CustomDrawLineStyle { get set }
  var customDrawLinePaths: [UIKit.UIBezierPath] { get set }
  var customDrawSelected: Swift.Bool { get set }
  var customDrawMagnetEnable: Swift.Bool { get set }
  var customDrawRelationKlineType: ChartKLineView.LineType { get set }
  var customDrawAddTimeStamp: Swift.Double { get set }
  var customDrawDisplayKlineType: ChartKLineView.LineType { get set }
  var customDrawDisplayTimeZoneID: Swift.String? { get set }
}
public protocol ICustomChartDataSetDraw {
  func addCustomEntry(entry: ChartKLineView.CustomChartDataEntry?)
  func completeCurrentCustomDrawing() -> Swift.Bool
  func supplyGraphicsPoints()
  func correctOtherPointsBy(entry: ChartKLineView.CustomChartDataEntry?)
  func calculateMagnetEntry(entry: ChartKLineView.CustomChartDataEntry?, changeValueDiff: Swift.Double)
  func generateDisplayEntries(xRange: ChartKLineView.Range, yRange: ChartKLineView.Range)
}
public protocol ICustomChartDataSetInfo {
  var customDrawColor: ChartKLineView.NSUIColor { get }
  var customDrawTranslateMap: [Swift.String : Any] { get }
  var remainPointCount: Swift.Int { get }
  var compeletedPointCount: Swift.Int { get }
  var displayKlineTypeTimeDistance: Swift.Double { get }
  var displayKlineTypeDateFormat: Swift.String { get }
}
public protocol ICustomChartDataSetLocation {
  func getEntryBy(touchPoint: CoreFoundation.CGPoint, maxXDiffValue: CoreFoundation.CGFloat, maxYDiffValue: CoreFoundation.CGFloat) -> ChartKLineView.CustomChartDataEntry?
  func calculatePositionInGraphicsBy(touchPoint: CoreFoundation.CGPoint) -> Swift.Bool
}
public protocol ICustomChartDataSetMove {
  func totalGraphicstMoveBy(with translation: CoreFoundation.CGPoint)
  func singleEntryMoveBy(editEntry: ChartKLineView.CustomChartDataEntry?, translation: CoreFoundation.CGPoint)
  func appendClosedGraphicsPathLocation(entries: [ChartKLineView.ChartDataEntry])
  func appendSinglePathLocation(points: [CoreFoundation.CGPoint], maxDiffValue: CoreFoundation.CGFloat)
  func clearPathLocation()
}
@objc(IChartFillFormatter) public protocol IFillFormatter {
  @objc func getFillLinePosition(dataSet: any ChartKLineView.ILineChartDataSet, dataProvider: any ChartKLineView.LineChartDataProvider) -> CoreFoundation.CGFloat
}
@objc(IChartHighlighter) public protocol IHighlighter {
  @objc func getHighlight(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ChartKLineView.Highlight?
}
@objc public protocol ILineChartDataSet : ChartKLineView.ILineRadarChartDataSet {
  @objc var mode: ChartKLineView.LineChartDataSet.Mode { get set }
  @objc var cubicIntensity: CoreFoundation.CGFloat { get set }
  @objc var circleRadius: CoreFoundation.CGFloat { get set }
  @objc var circleHoleRadius: CoreFoundation.CGFloat { get set }
  @objc var circleColors: [ChartKLineView.NSUIColor] { get set }
  @objc func getCircleColor(atIndex: Swift.Int) -> ChartKLineView.NSUIColor?
  @objc func setCircleColor(_ color: ChartKLineView.NSUIColor)
  @objc func resetCircleColors(_ index: Swift.Int)
  @objc var drawCirclesEnabled: Swift.Bool { get set }
  @objc var isDrawCirclesEnabled: Swift.Bool { get }
  @objc var circleHoleColor: ChartKLineView.NSUIColor? { get set }
  @objc var drawCircleHoleEnabled: Swift.Bool { get set }
  @objc var isDrawCircleHoleEnabled: Swift.Bool { get }
  @objc var lineDashPhase: CoreFoundation.CGFloat { get }
  @objc var lineDashLengths: [CoreFoundation.CGFloat]? { get set }
  @objc var lineCapType: CoreGraphics.CGLineCap { get set }
  @objc var fillFormatter: (any ChartKLineView.IFillFormatter)? { get set }
}
@objc public protocol ILineRadarChartDataSet : ChartKLineView.ILineScatterCandleRadarChartDataSet {
  @objc var fillColor: ChartKLineView.NSUIColor { get set }
  @objc var fill: ChartKLineView.Fill? { get set }
  @objc var fillAlpha: CoreFoundation.CGFloat { get set }
  @objc var lineWidth: CoreFoundation.CGFloat { get set }
  @objc var drawFilledEnabled: Swift.Bool { get set }
  @objc var isDrawFilledEnabled: Swift.Bool { get }
}
@objc public protocol ILineScatterCandleRadarChartDataSet : ChartKLineView.IBarLineScatterCandleBubbleChartDataSet {
  @objc var drawHorizontalHighlightIndicatorEnabled: Swift.Bool { get set }
  @objc var drawVerticalHighlightIndicatorEnabled: Swift.Bool { get set }
  @objc var isHorizontalHighlightIndicatorEnabled: Swift.Bool { get }
  @objc var isVerticalHighlightIndicatorEnabled: Swift.Bool { get }
  @objc func setDrawHighlightIndicators(_ enabled: Swift.Bool)
}
@objc(IChartMarker) public protocol IMarker {
  @objc var offset: CoreFoundation.CGPoint { get }
  @objc func offsetForDrawing(atPoint: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  @objc func refreshContent(entry: ChartKLineView.ChartDataEntry, highlight: ChartKLineView.Highlight)
  @objc func draw(context: CoreGraphics.CGContext, point: CoreFoundation.CGPoint)
}
@_inheritsConvenienceInitializers @objc(ChartIndexAxisValueFormatter) open class IndexAxisValueFormatter : ObjectiveC.NSObject, ChartKLineView.IAxisValueFormatter {
  @objc public var values: [Swift.String] {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(values: [Swift.String])
  @objc public static func with(values: [Swift.String]) -> ChartKLineView.IndexAxisValueFormatter?
  @objc open func stringForValue(_ value: Swift.Double, axis: ChartKLineView.AxisBase?) -> Swift.String
  @objc deinit
}
@objc public protocol IPieChartDataSet : ChartKLineView.IChartDataSet {
  @objc var sliceSpace: CoreFoundation.CGFloat { get set }
  @objc var automaticallyDisableSliceSpacing: Swift.Bool { get set }
  @objc var selectionShift: CoreFoundation.CGFloat { get set }
  @objc var xValuePosition: ChartKLineView.PieChartDataSet.ValuePosition { get set }
  @objc var yValuePosition: ChartKLineView.PieChartDataSet.ValuePosition { get set }
  @objc var valueLineColor: ChartKLineView.NSUIColor? { get set }
  @objc var useValueColorForLine: Swift.Bool { get set }
  @objc var valueLineWidth: CoreFoundation.CGFloat { get set }
  @objc var valueLinePart1OffsetPercentage: CoreFoundation.CGFloat { get set }
  @objc var valueLinePart1Length: CoreFoundation.CGFloat { get set }
  @objc var valueLinePart2Length: CoreFoundation.CGFloat { get set }
  @objc var valueLineVariableLength: Swift.Bool { get set }
  @objc var entryLabelFont: ChartKLineView.NSUIFont? { get set }
  @objc var entryLabelColor: ChartKLineView.NSUIColor? { get set }
  @objc var highlightColor: ChartKLineView.NSUIColor? { get set }
}
@objc public protocol IRadarChartDataSet : ChartKLineView.ILineRadarChartDataSet {
  @objc var drawHighlightCircleEnabled: Swift.Bool { get set }
  @objc var isDrawHighlightCircleEnabled: Swift.Bool { get }
  @objc var highlightCircleFillColor: ChartKLineView.NSUIColor? { get set }
  @objc var highlightCircleStrokeColor: ChartKLineView.NSUIColor? { get set }
  @objc var highlightCircleStrokeAlpha: CoreFoundation.CGFloat { get set }
  @objc var highlightCircleInnerRadius: CoreFoundation.CGFloat { get set }
  @objc var highlightCircleOuterRadius: CoreFoundation.CGFloat { get set }
  @objc var highlightCircleStrokeWidth: CoreFoundation.CGFloat { get set }
}
@objc public protocol IScatterChartDataSet : ChartKLineView.ILineScatterCandleRadarChartDataSet {
  @objc var scatterShapeSize: CoreFoundation.CGFloat { get }
  @objc var scatterShapeHoleRadius: CoreFoundation.CGFloat { get }
  @objc var scatterShapeHoleColor: ChartKLineView.NSUIColor? { get }
  @objc var shapeRenderer: (any ChartKLineView.IShapeRenderer)? { get }
}
@objc public protocol IShapeRenderer {
  @objc func renderShape(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.IScatterChartDataSet, viewPortHandler: ChartKLineView.ViewPortHandler, point: CoreFoundation.CGPoint, color: ChartKLineView.NSUIColor)
}
@objc(IChartValueFormatter) public protocol IValueFormatter {
  @objc func stringForValue(_ value: Swift.Double, entry: ChartKLineView.ChartDataEntry, dataSetIndex: Swift.Int, viewPortHandler: ChartKLineView.ViewPortHandler?) -> Swift.String
}
@_inheritsConvenienceInitializers @objc(ChartLegend) open class Legend : ChartKLineView.ComponentBase {
  @objc(ChartLegendForm) public enum Form : Swift.Int {
    case none
    case empty
    case `default`
    case square
    case circle
    case line
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(ChartLegendHorizontalAlignment) public enum HorizontalAlignment : Swift.Int {
    case left
    case center
    case right
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(ChartLegendVerticalAlignment) public enum VerticalAlignment : Swift.Int {
    case top
    case center
    case bottom
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(ChartLegendOrientation) public enum Orientation : Swift.Int {
    case horizontal
    case vertical
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(ChartLegendDirection) public enum Direction : Swift.Int {
    case leftToRight
    case rightToLeft
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc open var entries: [ChartKLineView.LegendEntry]
  @objc open var extraEntries: [ChartKLineView.LegendEntry]
  @objc open var horizontalAlignment: ChartKLineView.Legend.HorizontalAlignment
  @objc open var verticalAlignment: ChartKLineView.Legend.VerticalAlignment
  @objc open var orientation: ChartKLineView.Legend.Orientation
  @objc open var drawInside: Swift.Bool
  @objc open var isDrawInsideEnabled: Swift.Bool {
    @objc get
  }
  @objc open var direction: ChartKLineView.Legend.Direction
  @objc open var font: UIKit.UIFont
  @objc open var textColor: UIKit.UIColor
  @objc open var form: ChartKLineView.Legend.Form
  @objc open var formSize: CoreFoundation.CGFloat
  @objc open var formLineWidth: CoreFoundation.CGFloat
  @objc open var formLineDashPhase: CoreFoundation.CGFloat
  @objc open var formLineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var xEntrySpace: CoreFoundation.CGFloat
  @objc open var yEntrySpace: CoreFoundation.CGFloat
  @objc open var formToTextSpace: CoreFoundation.CGFloat
  @objc open var stackSpace: CoreFoundation.CGFloat
  @objc open var calculatedLabelSizes: [CoreFoundation.CGSize]
  @objc open var calculatedLabelBreakPoints: [Swift.Bool]
  @objc open var calculatedLineSizes: [CoreFoundation.CGSize]
  @objc override dynamic public init()
  @objc public init(entries: [ChartKLineView.LegendEntry])
  @objc open func getMaximumEntrySize(withFont font: ChartKLineView.NSUIFont) -> CoreFoundation.CGSize
  @objc open var neededWidth: CoreFoundation.CGFloat
  @objc open var neededHeight: CoreFoundation.CGFloat
  @objc open var textWidthMax: CoreFoundation.CGFloat
  @objc open var textHeightMax: CoreFoundation.CGFloat
  @objc open var wordWrapEnabled: Swift.Bool
  @objc open var isWordWrapEnabled: Swift.Bool {
    @objc get
  }
  @objc open var maxSizePercent: CoreFoundation.CGFloat
  @objc open func calculateDimensions(labelFont: ChartKLineView.NSUIFont, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc open func setCustom(entries: [ChartKLineView.LegendEntry])
  @objc open func resetCustom()
  @objc open var isLegendCustom: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartLegendEntry) open class LegendEntry : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(label: Swift.String?, form: ChartKLineView.Legend.Form, formSize: CoreFoundation.CGFloat, formLineWidth: CoreFoundation.CGFloat, formLineDashPhase: CoreFoundation.CGFloat, formLineDashLengths: [CoreFoundation.CGFloat]?, formColor: ChartKLineView.NSUIColor?)
  @objc open var label: Swift.String?
  @objc open var form: ChartKLineView.Legend.Form
  @objc open var formSize: CoreFoundation.CGFloat
  @objc open var formLineWidth: CoreFoundation.CGFloat
  @objc open var formLineDashPhase: CoreFoundation.CGFloat
  @objc open var formLineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var formColor: ChartKLineView.NSUIColor?
  @objc deinit
}
@objc(ChartLegendRenderer) open class LegendRenderer : ChartKLineView.Renderer {
  @objc open var legend: ChartKLineView.Legend?
  @objc public init(viewPortHandler: ChartKLineView.ViewPortHandler, legend: ChartKLineView.Legend?)
  @objc open func computeLegend(data: ChartKLineView.ChartData)
  @objc open func renderLegend(context: CoreGraphics.CGContext)
  @objc open func drawForm(context: CoreGraphics.CGContext, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, entry: ChartKLineView.LegendEntry, legend: ChartKLineView.Legend)
  @objc open func drawLabel(context: CoreGraphics.CGContext, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, label: Swift.String, font: ChartKLineView.NSUIFont, textColor: ChartKLineView.NSUIColor)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class LineChartData : ChartKLineView.ChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [any ChartKLineView.IChartDataSet]?)
  @objc deinit
}
@objc public protocol LineChartDataProvider : ChartKLineView.BarLineScatterCandleBubbleChartDataProvider {
  @objc var lineData: ChartKLineView.LineChartData? { get }
  @objc func getAxis(_ axis: ChartKLineView.YAxis.AxisDependency) -> ChartKLineView.YAxis
}
@objc @_inheritsConvenienceInitializers open class LineChartDataSet : ChartKLineView.LineRadarChartDataSet, ChartKLineView.ILineChartDataSet {
  @objc(LineChartMode) public enum Mode : Swift.Int {
    case linear
    case stepped
    case cubicBezier
    case horizontalBezier
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc required dynamic public init()
  @objc override public init(entries: [ChartKLineView.ChartDataEntry]?, label: Swift.String?)
  @objc open var mode: ChartKLineView.LineChartDataSet.Mode
  @objc open var cubicIntensity: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc open var circleRadius: CoreFoundation.CGFloat
  @objc open var circleHoleRadius: CoreFoundation.CGFloat
  @objc open var circleColors: [ChartKLineView.NSUIColor]
  @objc open func getCircleColor(atIndex index: Swift.Int) -> ChartKLineView.NSUIColor?
  @objc open func setCircleColor(_ color: ChartKLineView.NSUIColor)
  open func setCircleColors(_ colors: ChartKLineView.NSUIColor...)
  @objc open func resetCircleColors(_ index: Swift.Int)
  @objc open var drawCirclesEnabled: Swift.Bool
  @objc open var isDrawCirclesEnabled: Swift.Bool {
    @objc get
  }
  @objc open var circleHoleColor: ChartKLineView.NSUIColor?
  @objc open var drawCircleHoleEnabled: Swift.Bool
  @objc open var isDrawCircleHoleEnabled: Swift.Bool {
    @objc get
  }
  @objc open var drawHighlightCircleEnabled: Swift.Bool
  open var isDrawHighlightCircleEnabled: Swift.Bool {
    get
  }
  @objc open var drawHighlightCircleHoleEnabled: Swift.Bool
  open var isDrawHighlightCircleHoleEnabled: Swift.Bool {
    get
  }
  @objc open var lineDashPhase: CoreFoundation.CGFloat
  @objc open var lineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var lineCapType: CoreGraphics.CGLineCap
  @objc open var fillFormatter: (any ChartKLineView.IFillFormatter)? {
    @objc get
    @objc set
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc open class LineChartRenderer : ChartKLineView.LineRadarRenderer {
  @objc weak open var dataProvider: (any ChartKLineView.LineChartDataProvider)?
  @objc public init(dataProvider: any ChartKLineView.LineChartDataProvider, animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc open func drawDataSet(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ILineChartDataSet)
  @objc open func drawCubicBezier(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ILineChartDataSet)
  @objc open func drawHorizontalBezier(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ILineChartDataSet)
  open func drawCubicFill(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ILineChartDataSet, spline: CoreGraphics.CGMutablePath, matrix: CoreFoundation.CGAffineTransform, bounds: ChartKLineView.BarLineScatterCandleBubbleRenderer.XBounds)
  @objc open func drawLinear(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ILineChartDataSet)
  open func drawLinearFill(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ILineChartDataSet, trans: ChartKLineView.Transformer, bounds: ChartKLineView.BarLineScatterCandleBubbleRenderer.XBounds)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ChartKLineView.Highlight])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class LineChartView : ChartKLineView.BarLineChartViewBase, ChartKLineView.LineChartDataProvider {
  @_Concurrency.MainActor(unsafe) @objc override open func initialize()
  @_Concurrency.MainActor(unsafe) @objc open var lineData: ChartKLineView.LineChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class LineRadarChartDataSet : ChartKLineView.LineScatterCandleRadarChartDataSet, ChartKLineView.ILineRadarChartDataSet {
  @objc open var fillColor: ChartKLineView.NSUIColor {
    @objc get
    @objc set
  }
  @objc open var fill: ChartKLineView.Fill?
  @objc open var fillAlpha: CoreFoundation.CGFloat
  @objc open var lineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc open var drawFilledEnabled: Swift.Bool
  @objc open var isDrawFilledEnabled: Swift.Bool {
    @objc get
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc override public init(entries: [ChartKLineView.ChartDataEntry]?, label: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(LineRadarChartRenderer) open class LineRadarRenderer : ChartKLineView.LineScatterCandleRadarRenderer {
  @objc override public init(animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc open func drawFilledPath(context: CoreGraphics.CGContext, path: CoreGraphics.CGPath, fill: ChartKLineView.Fill, fillAlpha: CoreFoundation.CGFloat)
  @objc open func drawFilledPath(context: CoreGraphics.CGContext, path: CoreGraphics.CGPath, fillColor: ChartKLineView.NSUIColor, fillAlpha: CoreFoundation.CGFloat)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class LineScatterCandleRadarChartDataSet : ChartKLineView.BarLineScatterCandleBubbleChartDataSet, ChartKLineView.ILineScatterCandleRadarChartDataSet {
  @objc open var drawHorizontalHighlightIndicatorEnabled: Swift.Bool
  @objc open var drawVerticalHighlightIndicatorEnabled: Swift.Bool
  @objc open var isHorizontalHighlightIndicatorEnabled: Swift.Bool {
    @objc get
  }
  @objc open var isVerticalHighlightIndicatorEnabled: Swift.Bool {
    @objc get
  }
  @objc open func setDrawHighlightIndicators(_ enabled: Swift.Bool)
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc override public init(entries: [ChartKLineView.ChartDataEntry]?, label: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(LineScatterCandleRadarChartRenderer) open class LineScatterCandleRadarRenderer : ChartKLineView.BarLineScatterCandleBubbleRenderer {
  @objc override public init(animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc open func drawHighlightLines(context: CoreGraphics.CGContext, point: CoreFoundation.CGPoint, set: any ChartKLineView.ILineScatterCandleRadarChartDataSet)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartMarkerImage) open class MarkerImage : ObjectiveC.NSObject, ChartKLineView.IMarker {
  @objc open var image: ChartKLineView.NSUIImage?
  @objc open var offset: CoreFoundation.CGPoint
  @objc weak open var chartView: ChartKLineView.ChartViewBase?
  @objc open var size: CoreFoundation.CGSize
  @objc override dynamic public init()
  @objc open func offsetForDrawing(atPoint point: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  @objc open func refreshContent(entry: ChartKLineView.ChartDataEntry, highlight: ChartKLineView.Highlight)
  @objc open func draw(context: CoreGraphics.CGContext, point: CoreFoundation.CGPoint)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartMarkerView) @_Concurrency.MainActor(unsafe) open class MarkerView : ChartKLineView.NSUIView, ChartKLineView.IMarker {
  @_Concurrency.MainActor(unsafe) @objc open var offset: CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) weak open var chartView: ChartKLineView.ChartViewBase?
  @_Concurrency.MainActor(unsafe) @objc open func offsetForDrawing(atPoint point: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) @objc open func refreshContent(entry: ChartKLineView.ChartDataEntry, highlight: ChartKLineView.Highlight)
  @_Concurrency.MainActor(unsafe) @objc open func draw(context: CoreGraphics.CGContext, point: CoreFoundation.CGPoint)
  @objc @_Concurrency.MainActor(unsafe) open class func viewFromXib(in bundle: Foundation.Bundle = .main) -> ChartKLineView.MarkerView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MoveChartViewJob) open class MoveViewJob : ChartKLineView.ViewPortJob {
  @objc override open func doJob()
  @objc override public init(viewPortHandler: ChartKLineView.ViewPortHandler, xValue: Swift.Double, yValue: Swift.Double, transformer: ChartKLineView.Transformer, view: ChartKLineView.ChartViewBase)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PieChartData : ChartKLineView.ChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [any ChartKLineView.IChartDataSet]?)
  @objc override open var dataSets: [any ChartKLineView.IChartDataSet] {
    @objc get
    @objc set
  }
  @objc open var dataSet: (any ChartKLineView.IPieChartDataSet)? {
    @objc get
    @objc set
  }
  @objc override open func getDataSetByIndex(_ index: Swift.Int) -> (any ChartKLineView.IChartDataSet)?
  @objc override open func getDataSetByLabel(_ label: Swift.String, ignorecase: Swift.Bool) -> (any ChartKLineView.IChartDataSet)?
  @objc override open func entryForHighlight(_ highlight: ChartKLineView.Highlight) -> ChartKLineView.ChartDataEntry?
  @objc override open func addDataSet(_ d: (any ChartKLineView.IChartDataSet)!)
  @objc override open func removeDataSetByIndex(_ index: Swift.Int) -> Swift.Bool
  @objc open var yValueSum: Swift.Double {
    @objc get
  }
  @objc deinit
}
@objc open class PieChartDataEntry : ChartKLineView.ChartDataEntry {
  @objc required dynamic public init()
  @objc public init(value: Swift.Double)
  @objc convenience public init(value: Swift.Double, label: Swift.String?)
  @objc convenience public init(value: Swift.Double, label: Swift.String?, data: Any?)
  @objc convenience public init(value: Swift.Double, label: Swift.String?, icon: ChartKLineView.NSUIImage?)
  @objc convenience public init(value: Swift.Double, label: Swift.String?, icon: ChartKLineView.NSUIImage?, data: Any?)
  @objc convenience public init(value: Swift.Double, data: Any?)
  @objc convenience public init(value: Swift.Double, icon: ChartKLineView.NSUIImage?)
  @objc convenience public init(value: Swift.Double, icon: ChartKLineView.NSUIImage?, data: Any?)
  @objc open var label: Swift.String?
  @objc open var value: Swift.Double {
    @objc get
    @objc set
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PieChartDataSet : ChartKLineView.ChartDataSet, ChartKLineView.IPieChartDataSet {
  @objc(PieChartValuePosition) public enum ValuePosition : Swift.Int {
    case insideSlice
    case outsideSlice
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc required dynamic public init()
  @objc override public init(entries: [ChartKLineView.ChartDataEntry]?, label: Swift.String?)
  @objc open var sliceSpace: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc open var automaticallyDisableSliceSpacing: Swift.Bool
  @objc open var selectionShift: CoreFoundation.CGFloat
  @objc open var xValuePosition: ChartKLineView.PieChartDataSet.ValuePosition
  @objc open var yValuePosition: ChartKLineView.PieChartDataSet.ValuePosition
  @objc open var valueLineColor: ChartKLineView.NSUIColor?
  @objc open var useValueColorForLine: Swift.Bool
  @objc open var valueLineWidth: CoreFoundation.CGFloat
  @objc open var valueLinePart1OffsetPercentage: CoreFoundation.CGFloat
  @objc open var valueLinePart1Length: CoreFoundation.CGFloat
  @objc open var valueLinePart2Length: CoreFoundation.CGFloat
  @objc open var valueLineVariableLength: Swift.Bool
  @objc open var entryLabelFont: ChartKLineView.NSUIFont?
  @objc open var entryLabelColor: ChartKLineView.NSUIColor?
  @objc open var highlightColor: ChartKLineView.NSUIColor?
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc open class PieChartRenderer : ChartKLineView.DataRenderer {
  @objc weak open var chart: ChartKLineView.PieChartView?
  @objc public init(chart: ChartKLineView.PieChartView, animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc open func calculateMinimumRadiusForSpacedSlice(center: CoreFoundation.CGPoint, radius: CoreFoundation.CGFloat, angle: CoreFoundation.CGFloat, arcStartPointX: CoreFoundation.CGFloat, arcStartPointY: CoreFoundation.CGFloat, startAngle: CoreFoundation.CGFloat, sweepAngle: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc open func getSliceSpace(dataSet: any ChartKLineView.IPieChartDataSet) -> CoreFoundation.CGFloat
  @objc open func drawDataSet(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.IPieChartDataSet)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ChartKLineView.Highlight])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PieChartView : ChartKLineView.PieRadarChartViewBase {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func initialize()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override open func calculateOffsets()
  @_Concurrency.MainActor(unsafe) @objc override open func calcMinMax()
  @_Concurrency.MainActor(unsafe) @objc override open func getMarkerPosition(highlight: ChartKLineView.Highlight) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open func needsHighlight(index: Swift.Int) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override open var xAxis: ChartKLineView.XAxis {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func indexForAngle(_ angle: CoreFoundation.CGFloat) -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) open func dataSetIndexForIndex(_ xValue: Swift.Double) -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) open var drawAngles: [CoreFoundation.CGFloat] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var absoluteAngles: [CoreFoundation.CGFloat] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var holeColor: ChartKLineView.NSUIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawSlicesUnderHoleEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDrawSlicesUnderHoleEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawHoleEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDrawHoleEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var centerText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var centerAttributedText: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var centerTextOffset: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawCenterTextEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDrawCenterTextEnabled: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var radius: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var circleBox: CoreFoundation.CGRect {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var centerCircleBox: CoreFoundation.CGPoint {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var holeRadiusPercent: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var transparentCircleColor: ChartKLineView.NSUIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var transparentCircleRadiusPercent: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var entryLabelColor: ChartKLineView.NSUIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var entryLabelFont: ChartKLineView.NSUIFont? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawEntryLabelsEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDrawEntryLabelsEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var usePercentValuesEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isUsePercentValuesEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var centerTextRadiusPercent: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var maxAngle: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PieChartHighlighter) open class PieHighlighter : ChartKLineView.PieRadarHighlighter {
  @objc override open func closestHighlight(index: Swift.Int, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ChartKLineView.Highlight?
  @objc override public init(chart: any ChartKLineView.ChartDataProvider)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PieRadarChartViewBase : ChartKLineView.ChartViewBase {
  @objc @_Concurrency.MainActor(unsafe) open var rotationEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var minOffset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override open func initialize()
  @_Concurrency.MainActor(unsafe) @objc override open func calcMinMax()
  @_Concurrency.MainActor(unsafe) @objc override open var maxVisibleCount: Swift.Int {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func notifyDataSetChanged()
  @_Concurrency.MainActor(unsafe) @objc override open func calculateOffsets()
  @objc @_Concurrency.MainActor(unsafe) open func angleForPoint(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open func getPosition(center: CoreFoundation.CGPoint, dist: CoreFoundation.CGFloat, angle: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open func distanceToCenter(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open func indexForAngle(_ angle: CoreFoundation.CGFloat) -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) open var rotationAngle: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var rawRotationAngle: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var diameter: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var radius: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var chartYMax: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var chartYMin: Swift.Double {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isRotationEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var rotationWithTwoFingers: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isRotationWithTwoFingers: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func spin(duration: Foundation.TimeInterval, fromAngle: CoreFoundation.CGFloat, toAngle: CoreFoundation.CGFloat, easing: ChartKLineView.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func spin(duration: Foundation.TimeInterval, fromAngle: CoreFoundation.CGFloat, toAngle: CoreFoundation.CGFloat, easingOption: ChartKLineView.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func spin(duration: Foundation.TimeInterval, fromAngle: CoreFoundation.CGFloat, toAngle: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func stopSpinAnimation()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func nsuiTouchesBegan(_ touches: Swift.Set<ChartKLineView.NSUITouch>, withEvent event: ChartKLineView.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func nsuiTouchesMoved(_ touches: Swift.Set<ChartKLineView.NSUITouch>, withEvent event: ChartKLineView.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func nsuiTouchesEnded(_ touches: Swift.Set<ChartKLineView.NSUITouch>, withEvent event: ChartKLineView.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func nsuiTouchesCancelled(_ touches: Swift.Set<ChartKLineView.NSUITouch>?, withEvent event: ChartKLineView.NSUIEvent?)
  @objc @_Concurrency.MainActor(unsafe) open func stopDeceleration()
}
@_inheritsConvenienceInitializers @objc(PieRadarChartHighlighter) open class PieRadarHighlighter : ChartKLineView.ChartHighlighter {
  @objc override open func getHighlight(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ChartKLineView.Highlight?
  @objc open func closestHighlight(index: Swift.Int, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ChartKLineView.Highlight?
  @objc override public init(chart: any ChartKLineView.ChartDataProvider)
  @objc deinit
}
public typealias NSUIFont = UIKit.UIFont
public typealias NSUIImage = UIKit.UIImage
public typealias NSUIScrollView = UIKit.UIScrollView
public typealias NSUIScreen = UIKit.UIScreen
public typealias NSUIDisplayLink = QuartzCore.CADisplayLink
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NSUIView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public func accessibilityPostLayoutChangedNotification(withElement element: Any? = nil)
@objc @_Concurrency.MainActor(unsafe) open class NSUIAccessibilityElement : UIKit.UIAccessibilityElement {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(accessibilityContainer container: Any)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityFrame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc deinit
}
extension ChartKLineView.NSUIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func accessibilityChildren() -> [Any]?
  @_Concurrency.MainActor(unsafe) @objc final override public var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
}
public typealias NSUIColor = UIKit.UIColor
public typealias NSUIGestureRecognizer = UIKit.UIGestureRecognizer
public typealias NSUIGestureRecognizerState = UIKit.UIGestureRecognizer.State
public typealias NSUIGestureRecognizerDelegate = UIKit.UIGestureRecognizerDelegate
public typealias NSUITapGestureRecognizer = UIKit.UITapGestureRecognizer
public typealias NSUIPanGestureRecognizer = UIKit.UIPanGestureRecognizer
extension UIKit.UITapGestureRecognizer {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func nsuiNumberOfTouches() -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) dynamic open var nsuiNumberOfTapsRequired: Swift.Int {
    @objc get
    @objc set
  }
}
extension UIKit.UIPanGestureRecognizer {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func nsuiNumberOfTouches() -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) dynamic open func nsuiLocationOfTouch(_ touch: Swift.Int, inView: UIKit.UIView?) -> CoreFoundation.CGPoint
}
public typealias NSUIPinchGestureRecognizer = UIKit.UIPinchGestureRecognizer
public typealias NSUIRotationGestureRecognizer = UIKit.UIRotationGestureRecognizer
extension UIKit.UIPinchGestureRecognizer {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var nsuiScale: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open func nsuiLocationOfTouch(_ touch: Swift.Int, inView: UIKit.UIView?) -> CoreFoundation.CGPoint
}
public func NSUIGraphicsPushContext(_ context: CoreGraphics.CGContext)
public func NSUIGraphicsPopContext()
public typealias NSUIEvent = UIKit.UIEvent
public typealias NSUITouch = UIKit.UITouch
@objc extension ChartKLineView.NSUIView {
  @_Concurrency.MainActor(unsafe) @objc final override public func touchesBegan(_ touches: Swift.Set<ChartKLineView.NSUITouch>, with event: ChartKLineView.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc final override public func touchesMoved(_ touches: Swift.Set<ChartKLineView.NSUITouch>, with event: ChartKLineView.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc final override public func touchesEnded(_ touches: Swift.Set<ChartKLineView.NSUITouch>, with event: ChartKLineView.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc final override public func touchesCancelled(_ touches: Swift.Set<ChartKLineView.NSUITouch>, with event: ChartKLineView.NSUIEvent?)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func nsuiTouchesBegan(_ touches: Swift.Set<ChartKLineView.NSUITouch>, withEvent event: ChartKLineView.NSUIEvent?)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func nsuiTouchesMoved(_ touches: Swift.Set<ChartKLineView.NSUITouch>, withEvent event: ChartKLineView.NSUIEvent?)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func nsuiTouchesEnded(_ touches: Swift.Set<ChartKLineView.NSUITouch>, withEvent event: ChartKLineView.NSUIEvent?)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func nsuiTouchesCancelled(_ touches: Swift.Set<ChartKLineView.NSUITouch>?, withEvent event: ChartKLineView.NSUIEvent?)
}
@objc @_inheritsConvenienceInitializers open class RadarChartData : ChartKLineView.ChartData {
  @objc open var highlightColor: ChartKLineView.NSUIColor
  @objc open var highlightLineWidth: CoreFoundation.CGFloat
  @objc open var highlightLineDashPhase: CoreFoundation.CGFloat
  @objc open var highlightLineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var labels: [Swift.String]
  open func setLabels(_ labels: Swift.String...)
  @objc override dynamic public init()
  @objc override public init(dataSets: [any ChartKLineView.IChartDataSet]?)
  @objc override open func entryForHighlight(_ highlight: ChartKLineView.Highlight) -> ChartKLineView.ChartDataEntry?
  @objc deinit
}
@objc open class RadarChartDataEntry : ChartKLineView.ChartDataEntry {
  @objc required dynamic public init()
  @objc public init(value: Swift.Double)
  @objc convenience public init(value: Swift.Double, data: Any?)
  @objc open var value: Swift.Double {
    @objc get
    @objc set
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class RadarChartDataSet : ChartKLineView.LineRadarChartDataSet, ChartKLineView.IRadarChartDataSet {
  @objc required dynamic public init()
  @objc required override public init(entries: [ChartKLineView.ChartDataEntry]?, label: Swift.String?)
  @objc open var drawHighlightCircleEnabled: Swift.Bool
  @objc open var isDrawHighlightCircleEnabled: Swift.Bool {
    @objc get
  }
  @objc open var highlightCircleFillColor: ChartKLineView.NSUIColor?
  @objc open var highlightCircleStrokeColor: ChartKLineView.NSUIColor?
  @objc open var highlightCircleStrokeAlpha: CoreFoundation.CGFloat
  @objc open var highlightCircleInnerRadius: CoreFoundation.CGFloat
  @objc open var highlightCircleOuterRadius: CoreFoundation.CGFloat
  @objc open var highlightCircleStrokeWidth: CoreFoundation.CGFloat
  @objc deinit
}
@objc open class RadarChartRenderer : ChartKLineView.LineRadarRenderer {
  open var accessibilityXLabels: [Swift.String] {
    get
    set
  }
  @objc weak open var chart: ChartKLineView.RadarChartView?
  @objc public init(chart: ChartKLineView.RadarChartView, animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc open func drawWeb(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ChartKLineView.Highlight])
  open func createAccessibleElement(withDescription description: Swift.String, container: ChartKLineView.RadarChartView, dataSet: any ChartKLineView.IRadarChartDataSet, modifier: (ChartKLineView.NSUIAccessibilityElement) -> ()) -> ChartKLineView.NSUIAccessibilityElement
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class RadarChartView : ChartKLineView.PieRadarChartViewBase {
  @objc @_Concurrency.MainActor(unsafe) open var webLineWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var innerWebLineWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var webColor: ChartKLineView.NSUIColor
  @objc @_Concurrency.MainActor(unsafe) open var innerWebColor: ChartKLineView.NSUIColor
  @objc @_Concurrency.MainActor(unsafe) open var webAlpha: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var drawWeb: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var _xAxisRenderer: ChartKLineView.XAxisRendererRadarChart!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func initialize()
  @_Concurrency.MainActor(unsafe) @objc override open func calcMinMax()
  @_Concurrency.MainActor(unsafe) @objc override open func notifyDataSetChanged()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) open var factor: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var sliceAngle: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func indexForAngle(_ angle: CoreFoundation.CGFloat) -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) open var yAxis: ChartKLineView.YAxis {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var skipWebLineCount: Swift.Int {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override open var radius: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var chartYMax: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var chartYMin: Swift.Double {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var yRange: Swift.Double {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(RadarChartHighlighter) open class RadarHighlighter : ChartKLineView.PieRadarHighlighter {
  @objc override open func closestHighlight(index: Swift.Int, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ChartKLineView.Highlight?
  @objc override public init(chart: any ChartKLineView.ChartDataProvider)
  @objc deinit
}
@objc(ChartRange) open class Range : ObjectiveC.NSObject {
  @objc open var from: Swift.Double
  @objc open var to: Swift.Double
  @objc public init(from: Swift.Double, to: Swift.Double)
  @objc open func contains(_ value: Swift.Double) -> Swift.Bool
  @objc open func isLarger(_ value: Swift.Double) -> Swift.Bool
  @objc open func isSmaller(_ value: Swift.Double) -> Swift.Bool
  @objc deinit
}
@objc(ChartRenderer) open class Renderer : ObjectiveC.NSObject {
  @objc final public let viewPortHandler: ChartKLineView.ViewPortHandler
  @objc public init(viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ScatterChartData : ChartKLineView.BarLineScatterCandleBubbleChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [any ChartKLineView.IChartDataSet]?)
  @objc open func getGreatestShapeSize() -> CoreFoundation.CGFloat
  @objc deinit
}
@objc public protocol ScatterChartDataProvider : ChartKLineView.BarLineScatterCandleBubbleChartDataProvider {
  @objc var scatterData: ChartKLineView.ScatterChartData? { get }
}
@objc @_inheritsConvenienceInitializers open class ScatterChartDataSet : ChartKLineView.LineScatterCandleRadarChartDataSet, ChartKLineView.IScatterChartDataSet {
  @objc(ScatterShape) public enum Shape : Swift.Int {
    case square
    case circle
    case triangle
    case cross
    case x
    case chevronUp
    case chevronDown
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc open var scatterShapeSize: CoreFoundation.CGFloat
  @objc open var scatterShapeHoleRadius: CoreFoundation.CGFloat
  @objc open var scatterShapeHoleColor: ChartKLineView.NSUIColor?
  @objc open func setScatterShape(_ shape: ChartKLineView.ScatterChartDataSet.Shape)
  @objc open var shapeRenderer: (any ChartKLineView.IShapeRenderer)?
  @objc open class func renderer(forShape shape: ChartKLineView.ScatterChartDataSet.Shape) -> any ChartKLineView.IShapeRenderer
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc override public init(entries: [ChartKLineView.ChartDataEntry]?, label: Swift.String?)
  @objc deinit
}
@objc open class ScatterChartRenderer : ChartKLineView.LineScatterCandleRadarRenderer {
  @objc weak open var dataProvider: (any ChartKLineView.ScatterChartDataProvider)?
  @objc public init(dataProvider: any ChartKLineView.ScatterChartDataProvider, animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc open func drawDataSet(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.IScatterChartDataSet)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ChartKLineView.Highlight])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ScatterChartView : ChartKLineView.BarLineChartViewBase, ChartKLineView.ScatterChartDataProvider {
  @_Concurrency.MainActor(unsafe) @objc override open func initialize()
  @_Concurrency.MainActor(unsafe) @objc open var scatterData: ChartKLineView.ScatterChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class SquareShapeRenderer : ObjectiveC.NSObject, ChartKLineView.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.IScatterChartDataSet, viewPortHandler: ChartKLineView.ViewPortHandler, point: CoreFoundation.CGPoint, color: ChartKLineView.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
@objc open class StockCompareChartRenderer : ChartKLineView.LineRadarRenderer {
  @objc weak open var dataProvider: (any ChartKLineView.CompareChartDataProvider)?
  @objc public init(dataProvider: any ChartKLineView.CompareChartDataProvider, animator: ChartKLineView.Animator, viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc open func drawDataSet(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ILineChartDataSet)
  @objc open func drawLinear(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.ILineChartDataSet)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ChartKLineView.Highlight])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class TBCalculator : ObjectiveC.NSObject {
  @objc public class var shareInstance: ChartKLineView.TBCalculator {
    @objc get
  }
  @objc override dynamic public init()
  public func clearCache()
  public func getMAParamState() -> [Swift.Int]
  public func calculateWithCode(type: ChartKLineView.TBIndexType, entries: [ChartKLineView.CandleChartDataEntry]) -> [ChartKLineView.TBResultEntry]
  public func getCacheCode(type: ChartKLineView.TBIndexType, entries: [ChartKLineView.ChartDataEntry]) -> Swift.String
  public func calculate(type: ChartKLineView.TBIndexType, entries: [ChartKLineView.CandleChartDataEntry], start: Swift.Int, end: Swift.Int)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class TBExproNode : ObjectiveC.NSObject {
  final public let badPoint: Swift.Double
  public var start: Swift.Int
  public var evalE: ChartKLineView.Entry?
  public func visit(data: inout [Swift.String : ChartKLineView.Entry]) -> ChartKLineView.Entry
  public func evalE(data: inout [Swift.String : ChartKLineView.Entry]) -> ChartKLineView.Entry
  public func getValByType(tokenType: ChartKLineView.TBTokenType, data: [Swift.String : ChartKLineView.Entry]) -> ChartKLineView.Entry?
  public func buildEntry(data: [Swift.String : ChartKLineView.Entry]) -> ChartKLineView.Entry
  public func buildConstantEntry(data: Swift.Double) -> ChartKLineView.Entry
  public func getValueByIndex(index: Swift.Int, t2Entry: ChartKLineView.Entry) -> Swift.Double
  public func locatedBadPointIndex(t2Entry: ChartKLineView.Entry) -> Swift.Int
  public func locateBadPointIndex(points: [Swift.Double]) -> Swift.Int
  public func operation(_ op: Swift.String) -> ((Swift.Double, Swift.Double) -> Swift.Double)?
  @objc override dynamic public init()
  @objc deinit
}
@objc open class TBResultEntry : ChartKLineView.Entry {
  public var name: Swift.String?
  public init(name: Swift.String, object: [Swift.Double], decorations: [ChartKLineView.TBDecoration])
  public func getName() -> Swift.String
  override public func getEntry() -> Any
  public func getDecorations() -> [ChartKLineView.TBDecoration]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class TBStockTechParams : ObjectiveC.NSObject {
  @objc open class var paramsDict: [Swift.String : [[Swift.String : Any]]] {
    @objc get
  }
  @objc open class func indicatorValues(forKey: Swift.String) -> [Swift.Int]
  @objc open class func changeStockIndicatorParams(dic: [Swift.String : [[Swift.String : Any]]])
  @objc open class func saveStockIndicatorParams(dic: [Swift.String : [[Swift.String : Any]]])
  @objc open class func klineIndicatorParams() -> [Swift.String : [[Swift.String : Any]]]
  open class func paramsCurrentValue(index: Swift.Int, key: Swift.String) -> Swift.Int
  @objc open class func getDefaultParameters() -> [Swift.String : [[Swift.String : Any]]]
  @objc deinit
}
extension Swift.String {
  public func charAt(index: Swift.Int) -> Swift.Character
  public func toDouble() -> Swift.Double?
  public func toInt() -> Swift.Int?
}
extension Swift.Character {
  public func isLetterOrDigit() -> Swift.Bool
}
public enum TBIndexType : Swift.String {
  case MA
  case EMA
  case SAR
  case BBI
  case HMA
  case LMA
  case VMA
  case BBIBOLL
  case ALLIGAT
  case PBX
  case ENE
  case MIKE
  case XT
  case JAX
  case VOLUME
  case MACD
  case BOLL
  case KDJ
  case RSI
  case OBV
  case DMI
  case WR
  case EMV
  case DMA
  case ARBR
  case CODE
  case MACDKDJ
  case VR
  case TPXH
  case CCI
  case MFI
  case ATR
  case TRIX
  case BIAS
  case DKX
  case PCNT
  case ROC
  case SKDJ
  case UDL
  case VRSI
  case WAD
  case XS
  case NONE
  case ZigZag
  case MTM
  case ADTM
  case CR
  case WVAD
  public static var name: Swift.String {
    get
    set
  }
  public static func getType(type: ChartKLineView.TBIndexType) -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TBDecoration : Swift.String {
  case COLORSTICK
  case CIRCLEDOT
  case BROKENLINE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TBTokenType {
  case SMA
  case NEW_ASSIGN
  case ASSIGN
  case HIGH
  case LOW
  case CLOSE
  case REF
  case OPEN
  case NUMBER
  case COLON
  case SEMICOLON
  case IF
  case OP
  case ABS
  case SPACE
  case SUM
  case LP
  case RP
  case VAR
  case MAX
  case MIN
  case COM
  case EQ
  case AND
  case OR
  case NULL
  case GT
  case LT
  case MA
  case VOL
  case LTE
  case GTE
  case EMA
  case COLORSTICK
  case HHV
  case LLV
  case TAB
  case STD
  case SAR
  case CIRCLEDOT
  case AVEDEV
  case DMA
  case ZigZag
  public static func == (a: ChartKLineView.TBTokenType, b: ChartKLineView.TBTokenType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc open class TBToken : ObjectiveC.NSObject {
  open var kind: ChartKLineView.TBTokenType
  open var beginLine: Swift.Int
  open var endLine: Swift.Int
  open var beginColumn: Swift.Int
  open var endColumn: Swift.Int
  open var image: Swift.String?
  open var next: ChartKLineView.TBToken?
  open var specialToken: ChartKLineView.TBToken?
  public init(initKind: ChartKLineView.TBTokenType, initBeginLine: Swift.Int, initEndLine: Swift.Int, initBeginColumn: Swift.Int, initEndColumn: Swift.Int, initImage: Swift.String, initNext: ChartKLineView.TBToken?, initSpecialToken: ChartKLineView.TBToken?)
  @objc deinit
}
@objc(ChartTransformer) open class Transformer : ObjectiveC.NSObject {
  @objc open var _viewPortHandler: ChartKLineView.ViewPortHandler
  @objc public init(viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc open func prepareMatrixValuePx(chartXMin: Swift.Double, deltaX: CoreFoundation.CGFloat, deltaY: CoreFoundation.CGFloat, chartYMin: Swift.Double)
  @objc open func prepareMatrixOffset(inverted: Swift.Bool)
  open func pointValuesToPixel(_ points: inout [CoreFoundation.CGPoint])
  open func pointValueToPixel(_ point: inout CoreFoundation.CGPoint)
  @objc open func pixelForValues(x: Swift.Double, y: Swift.Double) -> CoreFoundation.CGPoint
  open func rectValueToPixel(_ r: inout CoreFoundation.CGRect)
  open func rectValueToPixel(_ r: inout CoreFoundation.CGRect, phaseY: Swift.Double)
  open func rectValueToPixelHorizontal(_ r: inout CoreFoundation.CGRect)
  open func rectValueToPixelHorizontal(_ r: inout CoreFoundation.CGRect, phaseY: Swift.Double)
  open func rectValuesToPixel(_ rects: inout [CoreFoundation.CGRect])
  open func pixelsToValues(_ pixels: inout [CoreFoundation.CGPoint])
  open func pixelToValues(_ pixel: inout CoreFoundation.CGPoint)
  @objc open func valueForTouchPoint(_ point: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  @objc open func valueForTouchPoint(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  @objc open var valueToPixelMatrix: CoreFoundation.CGAffineTransform {
    @objc get
  }
  @objc open var pixelToValueMatrix: CoreFoundation.CGAffineTransform {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartTransformerHorizontalBarChart) open class TransformerHorizontalBarChart : ChartKLineView.Transformer {
  @objc override open func prepareMatrixOffset(inverted: Swift.Bool)
  @objc override public init(viewPortHandler: ChartKLineView.ViewPortHandler)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class TriangleShapeRenderer : ObjectiveC.NSObject, ChartKLineView.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.IScatterChartDataSet, viewPortHandler: ChartKLineView.ViewPortHandler, point: CoreFoundation.CGPoint, color: ChartKLineView.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
@objc(ChartViewPortHandler) @objcMembers open class ViewPortHandler : ObjectiveC.NSObject {
  @objc public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  @objc open func setChartDimens(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  @objc open var hasChartDimens: Swift.Bool {
    @objc get
  }
  @objc open func restrainViewPort(offsetLeft: CoreFoundation.CGFloat, offsetTop: CoreFoundation.CGFloat, offsetRight: CoreFoundation.CGFloat, offsetBottom: CoreFoundation.CGFloat)
  @objc open var offsetLeft: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var offsetRight: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var offsetTop: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var offsetBottom: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentTop: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentLeft: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentRight: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentBottom: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentWidth: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc open var contentCenter: CoreFoundation.CGPoint {
    @objc get
  }
  @objc open var chartHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var chartWidth: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open func zoom(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat) -> CoreFoundation.CGAffineTransform
  @objc open func zoom(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGAffineTransform
  @objc open func zoomIn(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGAffineTransform
  @objc open func zoomOut(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGAffineTransform
  @objc open func resetZoom() -> CoreFoundation.CGAffineTransform
  @objc open func setZoom(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat) -> CoreFoundation.CGAffineTransform
  @objc open func setZoom(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGAffineTransform
  @objc open func fitScreen() -> CoreFoundation.CGAffineTransform
  @objc open func translate(pt: CoreFoundation.CGPoint) -> CoreFoundation.CGAffineTransform
  @objc open func centerViewPort(pt: CoreFoundation.CGPoint, chart: ChartKLineView.ChartViewBase)
  @discardableResult
  @objc open func refresh(newMatrix: CoreFoundation.CGAffineTransform, chart: ChartKLineView.ChartViewBase, invalidate: Swift.Bool) -> CoreFoundation.CGAffineTransform
  @objc open func setMinimumScaleX(_ xScale: CoreFoundation.CGFloat)
  @objc open func setMaximumScaleX(_ xScale: CoreFoundation.CGFloat)
  @objc open func setMinMaxScaleX(minScaleX: CoreFoundation.CGFloat, maxScaleX: CoreFoundation.CGFloat)
  @objc open func setMinimumScaleY(_ yScale: CoreFoundation.CGFloat)
  @objc open func setMaximumScaleY(_ yScale: CoreFoundation.CGFloat)
  @objc open func setMinMaxScaleY(minScaleY: CoreFoundation.CGFloat, maxScaleY: CoreFoundation.CGFloat)
  @objc open var touchMatrix: CoreFoundation.CGAffineTransform {
    @objc get
  }
  @objc open func isInBoundsX(_ x: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open func isInBoundsY(_ y: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open func isInBounds(point: CoreFoundation.CGPoint) -> Swift.Bool
  @objc open func isInBounds(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open func isInBoundsLeft(_ x: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open func isInBoundsRight(_ x: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open func isInBoundsTop(_ y: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open func isInBoundsBottom(_ y: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open func isIntersectingLine(from startPoint: CoreFoundation.CGPoint, to endPoint: CoreFoundation.CGPoint) -> Swift.Bool
  @objc open var scaleX: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var scaleY: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var minScaleX: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var minScaleY: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var maxScaleX: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var maxScaleY: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var transX: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var transY: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var isFullyZoomedOut: Swift.Bool {
    @objc get
  }
  @objc open var isFullyZoomedOutY: Swift.Bool {
    @objc get
  }
  @objc open var isFullyZoomedOutX: Swift.Bool {
    @objc get
  }
  @objc open func setDragOffsetX(_ offset: CoreFoundation.CGFloat)
  @objc open func setDragOffsetY(_ offset: CoreFoundation.CGFloat)
  @objc open var hasNoDragOffset: Swift.Bool {
    @objc get
  }
  @objc open var canZoomOutMoreX: Swift.Bool {
    @objc get
  }
  @objc open var canZoomInMoreX: Swift.Bool {
    @objc get
  }
  @objc open var canZoomOutMoreY: Swift.Bool {
    @objc get
  }
  @objc open var canZoomInMoreY: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc(ChartViewPortJob) open class ViewPortJob : ObjectiveC.NSObject {
  @objc public init(viewPortHandler: ChartKLineView.ViewPortHandler, xValue: Swift.Double, yValue: Swift.Double, transformer: ChartKLineView.Transformer, view: ChartKLineView.ChartViewBase)
  @objc open func doJob()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartXAxis) open class XAxis : ChartKLineView.AxisBase {
  @objc(XAxisLabelPosition) public enum LabelPosition : Swift.Int {
    case top
    case bottom
    case bothSided
    case topInside
    case bottomInside
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc open var labelWidth: CoreFoundation.CGFloat
  @objc open var labelHeight: CoreFoundation.CGFloat
  @objc open var labelRotatedWidth: CoreFoundation.CGFloat
  @objc open var labelRotatedHeight: CoreFoundation.CGFloat
  @objc open var labelRotationAngle: CoreFoundation.CGFloat
  @objc open var avoidFirstLastClippingEnabled: Swift.Bool
  @objc open var labelPosition: ChartKLineView.XAxis.LabelPosition
  @objc open var wordWrapEnabled: Swift.Bool
  @objc open var isWordWrapEnabled: Swift.Bool {
    @objc get
  }
  @objc open var wordWrapWidthPercent: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc open var isAvoidFirstLastClippingEnabled: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc(ChartXAxisRenderer) open class XAxisRenderer : ChartKLineView.AxisRendererBase {
  @objc public init(viewPortHandler: ChartKLineView.ViewPortHandler, xAxis: ChartKLineView.XAxis?, transformer: ChartKLineView.Transformer?)
  @objc override open func computeAxis(min: Swift.Double, max: Swift.Double, inverted: Swift.Bool)
  @objc override open func computeAxisValues(min: Swift.Double, max: Swift.Double)
  @objc open func computeSize()
  @objc override open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc override open func renderAxisLine(context: CoreGraphics.CGContext)
  @objc open func drawLabels(context: CoreGraphics.CGContext, pos: CoreFoundation.CGFloat, anchor: CoreFoundation.CGPoint)
  @objc open func drawLabel(context: CoreGraphics.CGContext, formattedLabel: Swift.String, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, attributes: [Foundation.NSAttributedString.Key : Any], constrainedToSize: CoreFoundation.CGSize, anchor: CoreFoundation.CGPoint, angleRadians: CoreFoundation.CGFloat)
  @objc override open func renderGridLines(context: CoreGraphics.CGContext)
  @objc open var gridClippingRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc open func drawGridLine(context: CoreGraphics.CGContext, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @objc override open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc open func renderLimitLineLine(context: CoreGraphics.CGContext, limitLine: ChartKLineView.ChartLimitLine, position: CoreFoundation.CGPoint)
  @objc open func renderLimitLineLabel(context: CoreGraphics.CGContext, limitLine: ChartKLineView.ChartLimitLine, position: CoreFoundation.CGPoint, yOffset: CoreFoundation.CGFloat)
  @objc deinit
}
@objc open class XAxisRendererHorizontalBarChart : ChartKLineView.XAxisRenderer {
  @objc public init(viewPortHandler: ChartKLineView.ViewPortHandler, xAxis: ChartKLineView.XAxis?, transformer: ChartKLineView.Transformer?, chart: ChartKLineView.BarChartView)
  @objc override open func computeAxis(min: Swift.Double, max: Swift.Double, inverted: Swift.Bool)
  @objc override open func computeSize()
  @objc override open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc override open func drawLabels(context: CoreGraphics.CGContext, pos: CoreFoundation.CGFloat, anchor: CoreFoundation.CGPoint)
  @objc open func drawLabel(context: CoreGraphics.CGContext, formattedLabel: Swift.String, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, attributes: [Foundation.NSAttributedString.Key : Any], anchor: CoreFoundation.CGPoint, angleRadians: CoreFoundation.CGFloat)
  @objc override open var gridClippingRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc override open func drawGridLine(context: CoreGraphics.CGContext, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @objc override open func renderAxisLine(context: CoreGraphics.CGContext)
  @objc override open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc deinit
}
@objc open class XAxisRendererRadarChart : ChartKLineView.XAxisRenderer {
  @objc weak open var chart: ChartKLineView.RadarChartView?
  @objc public init(viewPortHandler: ChartKLineView.ViewPortHandler, xAxis: ChartKLineView.XAxis?, chart: ChartKLineView.RadarChartView)
  @objc override open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc open func drawLabel(context: CoreGraphics.CGContext, formattedLabel: Swift.String, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, attributes: [Foundation.NSAttributedString.Key : Any], anchor: CoreFoundation.CGPoint, angleRadians: CoreFoundation.CGFloat)
  @objc override open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class XShapeRenderer : ObjectiveC.NSObject, ChartKLineView.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: any ChartKLineView.IScatterChartDataSet, viewPortHandler: ChartKLineView.ViewPortHandler, point: CoreFoundation.CGPoint, color: ChartKLineView.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartYAxis) open class YAxis : ChartKLineView.AxisBase {
  @objc(YAxisLabelPosition) public enum LabelPosition : Swift.Int {
    case outsideChart
    case insideChart
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum AxisDependency : Swift.Int {
    case left
    case right
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc open var drawBottomYLabelEntryEnabled: Swift.Bool
  @objc open var drawTopYLabelEntryEnabled: Swift.Bool
  @objc open var inverted: Swift.Bool
  @objc open var drawZeroLineEnabled: Swift.Bool
  @objc open var zeroLineColor: ChartKLineView.NSUIColor?
  @objc open var zeroLineWidth: CoreFoundation.CGFloat
  @objc open var zeroLineDashPhase: CoreFoundation.CGFloat
  @objc open var zeroLineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var spaceTop: CoreFoundation.CGFloat
  @objc open var spaceBottom: CoreFoundation.CGFloat
  @objc open var labelPosition: ChartKLineView.YAxis.LabelPosition
  @objc open var labelAlignment: UIKit.NSTextAlignment
  @objc open var labelXOffset: CoreFoundation.CGFloat
  @objc open var minWidth: CoreFoundation.CGFloat
  @objc open var maxWidth: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc public init(position: ChartKLineView.YAxis.AxisDependency)
  @objc open var axisDependency: ChartKLineView.YAxis.AxisDependency {
    @objc get
  }
  @objc open func requiredSize() -> CoreFoundation.CGSize
  @objc open func getRequiredHeightSpace() -> CoreFoundation.CGFloat
  @objc open var needsOffset: Swift.Bool {
    @objc get
  }
  @objc open var isInverted: Swift.Bool {
    @objc get
  }
  @objc override open func calculate(min dataMin: Swift.Double, max dataMax: Swift.Double)
  @objc open var isDrawBottomYLabelEntryEnabled: Swift.Bool {
    @objc get
  }
  @objc open var isDrawTopYLabelEntryEnabled: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc(ChartYAxisRenderer) open class YAxisRenderer : ChartKLineView.AxisRendererBase {
  @objc public init(viewPortHandler: ChartKLineView.ViewPortHandler, yAxis: ChartKLineView.YAxis?, transformer: ChartKLineView.Transformer?)
  @objc override open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc override open func renderAxisLine(context: CoreGraphics.CGContext)
  open func drawYLabels(context: CoreGraphics.CGContext, fixedPosition: CoreFoundation.CGFloat, positions: [CoreFoundation.CGPoint], offset: CoreFoundation.CGFloat, textAlign: UIKit.NSTextAlignment)
  @objc override open func renderGridLines(context: CoreGraphics.CGContext)
  @objc open var gridClippingRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc open func drawGridLine(context: CoreGraphics.CGContext, position: CoreFoundation.CGPoint)
  @objc open func transformedPositions() -> [CoreFoundation.CGPoint]
  @objc open func drawZeroLine(context: CoreGraphics.CGContext)
  @objc override open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class YAxisRendererHorizontalBarChart : ChartKLineView.YAxisRenderer {
  @objc override public init(viewPortHandler: ChartKLineView.ViewPortHandler, yAxis: ChartKLineView.YAxis?, transformer: ChartKLineView.Transformer?)
  @objc override open func computeAxis(min: Swift.Double, max: Swift.Double, inverted: Swift.Bool)
  @objc override open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc override open func renderAxisLine(context: CoreGraphics.CGContext)
  @objc open func drawYLabels(context: CoreGraphics.CGContext, fixedPosition: CoreFoundation.CGFloat, positions: [CoreFoundation.CGPoint], offset: CoreFoundation.CGFloat)
  @objc override open var gridClippingRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc override open func drawGridLine(context: CoreGraphics.CGContext, position: CoreFoundation.CGPoint)
  @objc override open func transformedPositions() -> [CoreFoundation.CGPoint]
  @objc override open func drawZeroLine(context: CoreGraphics.CGContext)
  @objc override open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc deinit
}
@objc open class YAxisRendererRadarChart : ChartKLineView.YAxisRenderer {
  @objc public init(viewPortHandler: ChartKLineView.ViewPortHandler, yAxis: ChartKLineView.YAxis?, chart: ChartKLineView.RadarChartView)
  @objc override open func computeAxisValues(min yMin: Swift.Double, max yMax: Swift.Double)
  @objc override open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc override open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc deinit
}
@objc(ZoomChartViewJob) open class ZoomViewJob : ChartKLineView.ViewPortJob {
  @objc public init(viewPortHandler: ChartKLineView.ViewPortHandler, scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, xValue: Swift.Double, yValue: Swift.Double, transformer: ChartKLineView.Transformer, axis: ChartKLineView.YAxis.AxisDependency, view: ChartKLineView.ChartViewBase)
  @objc override open func doJob()
  @objc deinit
}
extension ChartKLineView.ChartEasingOption : Swift.Equatable {}
extension ChartKLineView.ChartEasingOption : Swift.Hashable {}
extension ChartKLineView.ChartEasingOption : Swift.RawRepresentable {}
extension ChartKLineView.ChartDataSetRounding : Swift.Equatable {}
extension ChartKLineView.ChartDataSetRounding : Swift.Hashable {}
extension ChartKLineView.ChartDataSetRounding : Swift.RawRepresentable {}
extension ChartKLineView.LandScapeMode : Swift.Equatable {}
extension ChartKLineView.LandScapeMode : Swift.Hashable {}
extension ChartKLineView.LandScapeMode : Swift.RawRepresentable {}
extension ChartKLineView.StockStrategyType : Swift.Equatable {}
extension ChartKLineView.StockStrategyType : Swift.Hashable {}
extension ChartKLineView.StockStrategyType : Swift.RawRepresentable {}
extension ChartKLineView.StockDrawType : Swift.Equatable {}
extension ChartKLineView.StockDrawType : Swift.Hashable {}
extension ChartKLineView.StockDrawType : Swift.RawRepresentable {}
extension ChartKLineView.LineType : Swift.Equatable {}
extension ChartKLineView.LineType : Swift.Hashable {}
extension ChartKLineView.LineType : Swift.RawRepresentable {}
extension ChartKLineView.YAxisType : Swift.Equatable {}
extension ChartKLineView.YAxisType : Swift.Hashable {}
extension ChartKLineView.YAxisType : Swift.RawRepresentable {}
extension ChartKLineView.TCTIShape : Swift.Equatable {}
extension ChartKLineView.TCTIShape : Swift.Hashable {}
extension ChartKLineView.TCTIShape : Swift.RawRepresentable {}
extension ChartKLineView.ChartLimitLine.LabelPosition : Swift.Equatable {}
extension ChartKLineView.ChartLimitLine.LabelPosition : Swift.Hashable {}
extension ChartKLineView.ChartLimitLine.LabelPosition : Swift.RawRepresentable {}
extension ChartKLineView.ChartViewBase.ImageFormat : Swift.Equatable {}
extension ChartKLineView.ChartViewBase.ImageFormat : Swift.Hashable {}
extension ChartKLineView.CombinedChartView.DrawOrder : Swift.Equatable {}
extension ChartKLineView.CombinedChartView.DrawOrder : Swift.Hashable {}
extension ChartKLineView.CombinedChartView.DrawOrder : Swift.RawRepresentable {}
extension ChartKLineView.FillType : Swift.Equatable {}
extension ChartKLineView.FillType : Swift.Hashable {}
extension ChartKLineView.FillType : Swift.RawRepresentable {}
extension ChartKLineView.CustomDrawLineType : Swift.Equatable {}
extension ChartKLineView.CustomDrawLineType : Swift.Hashable {}
extension ChartKLineView.CustomDrawLineType : Swift.RawRepresentable {}
extension ChartKLineView.CustomCalculatePathType : Swift.Equatable {}
extension ChartKLineView.CustomCalculatePathType : Swift.Hashable {}
extension ChartKLineView.CustomDrawLineStyle : Swift.Equatable {}
extension ChartKLineView.CustomDrawLineStyle : Swift.Hashable {}
extension ChartKLineView.CustomDrawLineStyle : Swift.RawRepresentable {}
extension ChartKLineView.CustomDrawArrowStyle : Swift.Equatable {}
extension ChartKLineView.CustomDrawArrowStyle : Swift.Hashable {}
extension ChartKLineView.Legend.Form : Swift.Equatable {}
extension ChartKLineView.Legend.Form : Swift.Hashable {}
extension ChartKLineView.Legend.Form : Swift.RawRepresentable {}
extension ChartKLineView.Legend.HorizontalAlignment : Swift.Equatable {}
extension ChartKLineView.Legend.HorizontalAlignment : Swift.Hashable {}
extension ChartKLineView.Legend.HorizontalAlignment : Swift.RawRepresentable {}
extension ChartKLineView.Legend.VerticalAlignment : Swift.Equatable {}
extension ChartKLineView.Legend.VerticalAlignment : Swift.Hashable {}
extension ChartKLineView.Legend.VerticalAlignment : Swift.RawRepresentable {}
extension ChartKLineView.Legend.Orientation : Swift.Equatable {}
extension ChartKLineView.Legend.Orientation : Swift.Hashable {}
extension ChartKLineView.Legend.Orientation : Swift.RawRepresentable {}
extension ChartKLineView.Legend.Direction : Swift.Equatable {}
extension ChartKLineView.Legend.Direction : Swift.Hashable {}
extension ChartKLineView.Legend.Direction : Swift.RawRepresentable {}
extension ChartKLineView.LineChartDataSet.Mode : Swift.Equatable {}
extension ChartKLineView.LineChartDataSet.Mode : Swift.Hashable {}
extension ChartKLineView.LineChartDataSet.Mode : Swift.RawRepresentable {}
extension ChartKLineView.PieChartDataSet.ValuePosition : Swift.Equatable {}
extension ChartKLineView.PieChartDataSet.ValuePosition : Swift.Hashable {}
extension ChartKLineView.PieChartDataSet.ValuePosition : Swift.RawRepresentable {}
extension ChartKLineView.ScatterChartDataSet.Shape : Swift.Equatable {}
extension ChartKLineView.ScatterChartDataSet.Shape : Swift.Hashable {}
extension ChartKLineView.ScatterChartDataSet.Shape : Swift.RawRepresentable {}
extension ChartKLineView.TBIndexType : Swift.Equatable {}
extension ChartKLineView.TBIndexType : Swift.Hashable {}
extension ChartKLineView.TBIndexType : Swift.RawRepresentable {}
extension ChartKLineView.TBDecoration : Swift.Equatable {}
extension ChartKLineView.TBDecoration : Swift.Hashable {}
extension ChartKLineView.TBDecoration : Swift.RawRepresentable {}
extension ChartKLineView.TBTokenType : Swift.Equatable {}
extension ChartKLineView.TBTokenType : Swift.Hashable {}
extension ChartKLineView.XAxis.LabelPosition : Swift.Equatable {}
extension ChartKLineView.XAxis.LabelPosition : Swift.Hashable {}
extension ChartKLineView.XAxis.LabelPosition : Swift.RawRepresentable {}
extension ChartKLineView.YAxis.LabelPosition : Swift.Equatable {}
extension ChartKLineView.YAxis.LabelPosition : Swift.Hashable {}
extension ChartKLineView.YAxis.LabelPosition : Swift.RawRepresentable {}
extension ChartKLineView.YAxis.AxisDependency : Swift.Equatable {}
extension ChartKLineView.YAxis.AxisDependency : Swift.Hashable {}
extension ChartKLineView.YAxis.AxisDependency : Swift.RawRepresentable {}

// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TBCocoaMQTT
import Dispatch
import Foundation
import MqttCocoaAsyncSocket
import Swift
@_exported import TBCocoaMQTT
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum CocoaMQTTConnAck : Swift.UInt8, Swift.CustomStringConvertible {
  case accept = 0
  case unacceptableProtocolVersion
  case identifierRejected
  case serverUnavailable
  case badUsernameOrPassword
  case notAuthorized
  case reserved
  public init(byte: Swift.UInt8)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public protocol CocoaMQTTDelegate {
  @objc func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didConnectAck ack: TBCocoaMQTT.CocoaMQTTConnAck)
  @objc func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didPublishMessage message: TBCocoaMQTT.CocoaMQTTMessage, id: Swift.UInt16)
  @objc func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didPublishAck id: Swift.UInt16)
  @objc func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didReceiveMessage message: TBCocoaMQTT.CocoaMQTTMessage, id: Swift.UInt16)
  @objc func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didSubscribeTopics success: Foundation.NSDictionary, failed: [Swift.String])
  @objc func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didUnsubscribeTopics topics: [Swift.String])
  @objc func mqttDidPing(_ mqtt: TBCocoaMQTT.CocoaMQTT)
  @objc func mqttDidReceivePong(_ mqtt: TBCocoaMQTT.CocoaMQTT)
  @objc func mqttDidDisconnect(_ mqtt: TBCocoaMQTT.CocoaMQTT, withError err: (any Swift.Error)?)
  @objc optional func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc optional func mqttUrlSession(_ mqtt: TBCocoaMQTT.CocoaMQTT, didReceiveTrust trust: Security.SecTrust, didReceiveChallenge challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc optional func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didPublishComplete id: Swift.UInt16)
  @objc optional func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didStateChangeTo state: TBCocoaMQTT.CocoaMQTTConnState)
}
public func setMqtt3Version()
@objc public class CocoaMQTT : ObjectiveC.NSObject {
  weak public var delegate: (any TBCocoaMQTT.CocoaMQTTDelegate)?
  public var host: Swift.String
  public var port: Swift.UInt16
  public var clientID: Swift.String
  public var username: Swift.String?
  public var password: Swift.String?
  public var cleanSession: Swift.Bool
  public var willMessage: TBCocoaMQTT.CocoaMQTTMessage?
  public var backgroundOnSocket: Swift.Bool {
    get
    set
  }
  public var delegateQueue: Dispatch.DispatchQueue
  public var connState: TBCocoaMQTT.CocoaMQTTConnState {
    get
    set
  }
  public var deliverTimeout: Swift.Double {
    get
    set
  }
  public var messageQueueSize: Swift.UInt {
    get
    set
  }
  public var inflightWindowSize: Swift.UInt {
    get
    set
  }
  public var keepAlive: Swift.UInt16
  public var autoReconnect: Swift.Bool
  public var autoReconnectTimeInterval: Swift.UInt16
  public var maxAutoReconnectTimeInterval: Swift.UInt16
  public var logLevel: TBCocoaMQTT.CocoaMQTTLoggerLevel {
    get
    set
  }
  public var enableSSL: Swift.Bool {
    get
    set
  }
  public var sslSettings: [Swift.String : ObjectiveC.NSObject]? {
    get
    set
  }
  public var allowUntrustCACertificate: Swift.Bool {
    get
    set
  }
  public var subscriptions: [Swift.String : TBCocoaMQTT.CocoaMQTTQoS]
  public var didConnectAck: (TBCocoaMQTT.CocoaMQTT, TBCocoaMQTT.CocoaMQTTConnAck) -> Swift.Void
  public var didPublishMessage: (TBCocoaMQTT.CocoaMQTT, TBCocoaMQTT.CocoaMQTTMessage, Swift.UInt16) -> Swift.Void
  public var didPublishAck: (TBCocoaMQTT.CocoaMQTT, Swift.UInt16) -> Swift.Void
  public var didReceiveMessage: (TBCocoaMQTT.CocoaMQTT, TBCocoaMQTT.CocoaMQTTMessage, Swift.UInt16) -> Swift.Void
  public var didSubscribeTopics: (TBCocoaMQTT.CocoaMQTT, Foundation.NSDictionary, [Swift.String]) -> Swift.Void
  public var didUnsubscribeTopics: (TBCocoaMQTT.CocoaMQTT, [Swift.String]) -> Swift.Void
  public var didPing: (TBCocoaMQTT.CocoaMQTT) -> Swift.Void
  public var didReceivePong: (TBCocoaMQTT.CocoaMQTT) -> Swift.Void
  public var didDisconnect: (TBCocoaMQTT.CocoaMQTT, (any Swift.Error)?) -> Swift.Void
  public var didReceiveTrust: (TBCocoaMQTT.CocoaMQTT, Security.SecTrust, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void
  public var didCompletePublish: (TBCocoaMQTT.CocoaMQTT, Swift.UInt16) -> Swift.Void
  public var didChangeState: (TBCocoaMQTT.CocoaMQTT, TBCocoaMQTT.CocoaMQTTConnState) -> Swift.Void
  public init(clientID: Swift.String, host: Swift.String = "localhost", port: Swift.UInt16 = 1883, socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol = CocoaMQTTSocket())
  @objc deinit
  public func connect() -> Swift.Bool
  public func connect(timeout: Foundation.TimeInterval) -> Swift.Bool
  public func disconnect()
  public func ping()
  @discardableResult
  public func publish(_ topic: Swift.String, withString string: Swift.String, qos: TBCocoaMQTT.CocoaMQTTQoS = .qos1, retained: Swift.Bool = false) -> Swift.Int
  @discardableResult
  public func publish(_ message: TBCocoaMQTT.CocoaMQTTMessage) -> Swift.Int
  public func subscribe(_ topic: Swift.String, qos: TBCocoaMQTT.CocoaMQTTQoS = .qos1)
  public func subscribe(_ topics: [(Swift.String, TBCocoaMQTT.CocoaMQTTQoS)])
  public func unsubscribe(_ topic: Swift.String)
  public func unsubscribe(_ topics: [Swift.String])
}
extension TBCocoaMQTT.CocoaMQTT : TBCocoaMQTT.CocoaMQTTSocketDelegate {
  public func socketConnected(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol)
  public func socket(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func socketUrlSession(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, didReceiveTrust trust: Security.SecTrust, didReceiveChallenge challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  public func socketDidSecure(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket)
  public func socket(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, didWriteDataWithTag tag: Swift.Int)
  public func socket(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, didRead data: Foundation.Data, withTag tag: Swift.Int)
  public func socketDidDisconnect(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, withError err: (any Swift.Error)?)
}
@objc public enum CocoaMQTTConnState : Swift.UInt8, Swift.CustomStringConvertible {
  case disconnected = 0
  case connecting
  case connected
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public protocol CocoaMQTT5Delegate {
  @objc func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didConnectAck ack: TBCocoaMQTT.CocoaMQTTCONNACKReasonCode, connAckData: TBCocoaMQTT.MqttDecodeConnAck?)
  @objc func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didPublishMessage message: TBCocoaMQTT.CocoaMQTT5Message, id: Swift.UInt16)
  @objc func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didPublishAck id: Swift.UInt16, pubAckData: TBCocoaMQTT.MqttDecodePubAck?)
  @objc func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didPublishRec id: Swift.UInt16, pubRecData: TBCocoaMQTT.MqttDecodePubRec?)
  @objc func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didReceiveMessage message: TBCocoaMQTT.CocoaMQTT5Message, id: Swift.UInt16, publishData: TBCocoaMQTT.MqttDecodePublish?)
  @objc func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didSubscribeTopics success: Foundation.NSDictionary, failed: [Swift.String], subAckData: TBCocoaMQTT.MqttDecodeSubAck?)
  @objc func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didUnsubscribeTopics topics: [Swift.String], unsubAckData: TBCocoaMQTT.MqttDecodeUnsubAck?)
  @objc func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didReceiveDisconnectReasonCode reasonCode: TBCocoaMQTT.CocoaMQTTDISCONNECTReasonCode)
  @objc func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didReceiveAuthReasonCode reasonCode: TBCocoaMQTT.CocoaMQTTAUTHReasonCode)
  @objc func mqtt5DidPing(_ mqtt5: TBCocoaMQTT.CocoaMQTT5)
  @objc func mqtt5DidReceivePong(_ mqtt5: TBCocoaMQTT.CocoaMQTT5)
  @objc func mqtt5DidDisconnect(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, withError err: (any Swift.Error)?)
  @objc optional func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc optional func mqtt5UrlSession(_ mqtt: TBCocoaMQTT.CocoaMQTT5, didReceiveTrust trust: Security.SecTrust, didReceiveChallenge challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc optional func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didPublishComplete id: Swift.UInt16, pubCompData: TBCocoaMQTT.MqttDecodePubComp?)
  @objc optional func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didStateChangeTo state: TBCocoaMQTT.CocoaMQTTConnState)
}
public func setMqtt5Version()
@objc public class CocoaMQTT5 : ObjectiveC.NSObject {
  public var name: Swift.String
  weak public var delegate: (any TBCocoaMQTT.CocoaMQTT5Delegate)?
  public var host: Swift.String
  public var port: Swift.UInt16
  public var clientID: Swift.String
  public var username: Swift.String?
  public var password: Swift.String?
  public var unhandlePingCount: Swift.Int32
  public var cleanSession: Swift.Bool
  public var willMessage: TBCocoaMQTT.CocoaMQTT5Message?
  public var backgroundOnSocket: Swift.Bool {
    get
    set
  }
  public var delegateQueue: Dispatch.DispatchQueue
  public var connState: TBCocoaMQTT.CocoaMQTTConnState {
    get
    set
  }
  public var deliverTimeout: Swift.Double {
    get
    set
  }
  public var messageQueueSize: Swift.UInt {
    get
    set
  }
  public var inflightWindowSize: Swift.UInt {
    get
    set
  }
  public var keepAlive: Swift.UInt16
  public var autoReconnect: Swift.Bool
  public var autoReconnectTimeInterval: Swift.UInt16
  public var maxAutoReconnectTimeInterval: Swift.UInt16
  public var connectProperties: TBCocoaMQTT.MqttConnectProperties?
  public var authProperties: TBCocoaMQTT.MqttAuthProperties?
  public var logLevel: TBCocoaMQTT.CocoaMQTTLoggerLevel {
    get
    set
  }
  public var minReceiveInterval: Swift.Double
  public var enableSSL: Swift.Bool {
    get
    set
  }
  public var sslSettings: [Swift.String : ObjectiveC.NSObject]? {
    get
    set
  }
  public var allowUntrustCACertificate: Swift.Bool {
    get
    set
  }
  public var subscriptions: TBCocoaMQTT.ThreadSafeDictionary<Swift.String, TBCocoaMQTT.CocoaMQTTQoS>
  public var didConnectAck: (TBCocoaMQTT.CocoaMQTT5, TBCocoaMQTT.CocoaMQTTCONNACKReasonCode, TBCocoaMQTT.MqttDecodeConnAck?) -> Swift.Void
  public var didPublishMessage: (TBCocoaMQTT.CocoaMQTT5, TBCocoaMQTT.CocoaMQTT5Message, Swift.UInt16) -> Swift.Void
  public var didPublishAck: (TBCocoaMQTT.CocoaMQTT5, Swift.UInt16, TBCocoaMQTT.MqttDecodePubAck?) -> Swift.Void
  public var didPublishRec: (TBCocoaMQTT.CocoaMQTT5, Swift.UInt16, TBCocoaMQTT.MqttDecodePubRec?) -> Swift.Void
  public var didReceiveMessage: (TBCocoaMQTT.CocoaMQTT5, TBCocoaMQTT.CocoaMQTT5Message, Swift.UInt16, TBCocoaMQTT.MqttDecodePublish?) -> Swift.Void
  public var didSubscribeTopics: (TBCocoaMQTT.CocoaMQTT5, Foundation.NSDictionary, [Swift.String], TBCocoaMQTT.MqttDecodeSubAck?) -> Swift.Void
  public var didUnsubscribeTopics: (TBCocoaMQTT.CocoaMQTT5, [Swift.String], TBCocoaMQTT.MqttDecodeUnsubAck?) -> Swift.Void
  public var didPing: (TBCocoaMQTT.CocoaMQTT5) -> Swift.Void
  public var didReceivePong: (TBCocoaMQTT.CocoaMQTT5) -> Swift.Void
  public var didDisconnect: (TBCocoaMQTT.CocoaMQTT5, (any Swift.Error)?) -> Swift.Void
  public var didDisconnectReasonCode: (TBCocoaMQTT.CocoaMQTT5, TBCocoaMQTT.CocoaMQTTDISCONNECTReasonCode) -> Swift.Void
  public var didAuthReasonCode: (TBCocoaMQTT.CocoaMQTT5, TBCocoaMQTT.CocoaMQTTAUTHReasonCode) -> Swift.Void
  public var didReceiveTrust: (TBCocoaMQTT.CocoaMQTT5, Security.SecTrust, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void
  public var didCompletePublish: (TBCocoaMQTT.CocoaMQTT5, Swift.UInt16, TBCocoaMQTT.MqttDecodePubComp?) -> Swift.Void
  public var didChangeState: (TBCocoaMQTT.CocoaMQTT5, TBCocoaMQTT.CocoaMQTTConnState) -> Swift.Void
  public init(clientID: Swift.String, host: Swift.String = "localhost", port: Swift.UInt16 = 1883, socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol = CocoaMQTTSocket())
  @objc deinit
  public func connect() -> Swift.Bool
  public func connect(timeout: Foundation.TimeInterval) -> Swift.Bool
  public func disconnect()
  public func disconnect(reasonCode: TBCocoaMQTT.CocoaMQTTDISCONNECTReasonCode, userProperties: [Swift.String : Swift.String])
  public func ping()
  @discardableResult
  public func publish(_ topic: Swift.String, withString string: Swift.String, qos: TBCocoaMQTT.CocoaMQTTQoS = .qos1, DUP: Swift.Bool = false, retained: Swift.Bool = false, properties: TBCocoaMQTT.MqttPublishProperties) -> Swift.Int
  @discardableResult
  public func publish(_ message: TBCocoaMQTT.CocoaMQTT5Message, DUP: Swift.Bool = false, retained: Swift.Bool = false, properties: TBCocoaMQTT.MqttPublishProperties) -> Swift.Int
  public func subscribe(_ topic: Swift.String, qos: TBCocoaMQTT.CocoaMQTTQoS = .qos1)
  public func subscribe(_ topics: [TBCocoaMQTT.MqttSubscription])
  public func subscribe(_ topics: [TBCocoaMQTT.MqttSubscription], packetIdentifier: Swift.UInt16? = nil, subscriptionIdentifier: Swift.UInt32? = nil, userProperty: [Swift.String : Swift.String] = [:])
  public func unsubscribe(_ topic: Swift.String)
  public func unsubscribe(_ topics: [TBCocoaMQTT.MqttSubscription])
  public func auth(reasonCode: TBCocoaMQTT.CocoaMQTTAUTHReasonCode, authProperties: TBCocoaMQTT.MqttAuthProperties)
}
extension TBCocoaMQTT.CocoaMQTT5 : TBCocoaMQTT.CocoaMQTTSocketDelegate {
  public func socketConnected(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol)
  public func socket(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func socketUrlSession(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, didReceiveTrust trust: Security.SecTrust, didReceiveChallenge challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  public func socketDidSecure(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket)
  public func socket(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, didWriteDataWithTag tag: Swift.Int)
  public func socket(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, didRead data: Foundation.Data, withTag tag: Swift.Int)
  public func socketDidDisconnect(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, withError err: (any Swift.Error)?)
}
extension TBCocoaMQTT.CocoaMQTT5 {
  public func subscribe(_ topic: Swift.String, qos: TBCocoaMQTT.CocoaMQTTQoS = .qos1, userProperty: [Swift.String : Swift.String]?)
  public func subscribes(_ topics: [TBCocoaMQTT.MqttSubscription], userProperty: [Swift.String : Swift.String]?)
  public func unsubscribe(_ topic: Swift.String, userProperty: [Swift.String : Swift.String]?)
  public func unsubscribes(_ topics: [TBCocoaMQTT.MqttSubscription], userProperty: [Swift.String : Swift.String]?)
}
@objc public class CocoaMQTT5Message : ObjectiveC.NSObject {
  public var qos: TBCocoaMQTT.CocoaMQTTQoS
  public var topic: Swift.String
  public var payload: [Swift.UInt8]
  public var retained: Swift.Bool
  public var duplicated: Swift.Bool
  public var isUTF8EncodedData: Swift.Bool
  public var willDelayInterval: Swift.UInt32?
  public var willExpiryInterval: Swift.UInt32?
  public var contentType: Swift.String?
  public var willResponseTopic: Swift.String?
  public var willCorrelationData: [Swift.UInt8]?
  public var willUserProperty: [Swift.String : Swift.String]?
  public var string: Swift.String? {
    get
  }
  public var properties: [Swift.UInt8] {
    get
  }
  public init(topic: Swift.String, string: Swift.String, qos: TBCocoaMQTT.CocoaMQTTQoS = .qos1, retained: Swift.Bool = false)
  public init(topic: Swift.String, payload: [Swift.UInt8], qos: TBCocoaMQTT.CocoaMQTTQoS = .qos1, retained: Swift.Bool = false)
  public init(topic: Swift.String, payload: [Swift.String : Any], qos: TBCocoaMQTT.CocoaMQTTQoS = .qos1, retained: Swift.Bool = false) throws
  @objc deinit
}
extension TBCocoaMQTT.CocoaMQTT5Message {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
public enum CocoaMQTTLoggerLevel : Swift.Int {
  case debug, info, warning, error, off
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class CocoaMQTTLogger : ObjectiveC.NSObject {
  public static var logger: TBCocoaMQTT.CocoaMQTTLogger
  @objc override dynamic public init()
  open func log(level: TBCocoaMQTT.CocoaMQTTLoggerLevel, message: Swift.String)
  @objc deinit
}
@objc public class CocoaMQTTMessage : ObjectiveC.NSObject {
  public var qos: TBCocoaMQTT.CocoaMQTTQoS
  public var topic: Swift.String
  public var payload: [Swift.UInt8]
  public var retained: Swift.Bool
  public var duplicated: Swift.Bool
  public var string: Swift.String? {
    get
  }
  public init(topic: Swift.String, string: Swift.String, qos: TBCocoaMQTT.CocoaMQTTQoS = .qos1, retained: Swift.Bool = false)
  public init(topic: Swift.String, payload: [Swift.UInt8], qos: TBCocoaMQTT.CocoaMQTTQoS = .qos1, retained: Swift.Bool = false)
  @objc deinit
}
extension TBCocoaMQTT.CocoaMQTTMessage {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
public enum CocoaMQTTPropertyName : Swift.UInt8 {
  case payloadFormatIndicator
  case willExpiryInterval
  case contentType
  case responseTopic
  case correlationData
  case subscriptionIdentifier
  case sessionExpiryInterval
  case assignedClientIdentifier
  case serverKeepAlive
  case authenticationMethod
  case authenticationData
  case requestProblemInformation
  case willDelayInterval
  case requestResponseInformation
  case responseInformation
  case serverReference
  case reasonString
  case receiveMaximum
  case topicAliasMaximum
  case topicAlias
  case maximumQoS
  case retainAvailable
  case userProperty
  case maximumPacketSize
  case wildcardSubscriptionAvailable
  case subscriptionIdentifiersAvailable
  case sharedSubscriptionAvailable
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum formatInt : Swift.Int {
  case formatUint8
  case formatUint16
  case formatUint32
  case formatSint8
  case formatSint16
  case formatSint32
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CocoaMQTTAUTHReasonCode : Swift.UInt8 {
  case success = 0x00
  case continueAuthentication = 0x18
  case ReAuthenticate = 0x19
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTCONNACKReasonCode : Swift.UInt8 {
  case success = 0x00
  case unspecifiedError = 0x80
  case malformedPacket = 0x81
  case protocolError = 0x82
  case implementationSpecificError = 0x83
  case unsupportedProtocolVersion = 0x84
  case clientIdentifierNotValid = 0x85
  case badUsernameOrPassword = 0x86
  case notAuthorized = 0x87
  case serverUnavailable = 0x88
  case serverBusy = 0x89
  case banned = 0x8A
  case badAuthenticationMethod = 0x8C
  case topicNameInvalid = 0x90
  case packetTooLarge = 0x95
  case quotaExceeded = 0x97
  case payloadFormatInvalid = 0x99
  case retainNotSupported = 0x9A
  case qosNotSupported = 0x9B
  case useAnotherServer = 0x9C
  case serverMoved = 0x9D
  case connectionRateExceeded = 0x9F
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTDISCONNECTReasonCode : Swift.UInt8 {
  case normalDisconnection = 0x00
  case disconnectWithWillMessage = 0x04
  case unspecifiedError = 0x80
  case malformedPacket = 0x81
  case protocolError = 0x82
  case implementationSpecificError = 0x83
  case notAuthorized = 0x87
  case serverBusy = 0x89
  case serverShuttingDown = 0x8B
  case keepAliveTimeout = 0x8D
  case sessionTakenOver = 0x8E
  case topicFilterInvalid = 0x8F
  case topicNameInvalid = 0x90
  case receiveMaximumExceeded = 0x93
  case topicAliasInvalid = 0x94
  case packetTooLarge = 0x95
  case messageRateTooHigh = 0x96
  case quotaExceeded = 0x97
  case administrativeAction = 0x98
  case payloadFormatInvalid = 0x99
  case retainNotSupported = 0x9A
  case qosNotSupported = 0x9B
  case useAnotherServer = 0x9C
  case serverMoved = 0x9D
  case sharedSubscriptionsNotSupported = 0x9E
  case connectionRateExceeded = 0x9F
  case maximumConnectTime = 0xA0
  case subscriptionIdentifiersNotSupported = 0xA1
  case wildcardSubscriptionsNotSupported = 0xA2
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTPUBACKReasonCode : Swift.UInt8 {
  case success = 0x00
  case noMatchingSubscribers = 0x10
  case unspecifiedError = 0x80
  case implementationSpecificError = 0x83
  case notAuthorized = 0x87
  case topicNameInvalid = 0x90
  case packetIdentifierInUse = 0x91
  case quotaExceeded = 0x97
  case payloadFormatInvalid = 0x99
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTPUBCOMPReasonCode : Swift.UInt8 {
  case success = 0x00
  case packetIdentifierNotFound = 0x92
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTPUBRECReasonCode : Swift.UInt8 {
  case success = 0x00
  case noMatchingSubscribers = 0x10
  case unspecifiedError = 0x80
  case implementationSpecificError = 0x83
  case notAuthorized = 0x87
  case topicNameInvalid = 0x90
  case packetIdentifierInUse = 0x91
  case quotaExceeded = 0x97
  case payloadFormatInvalid = 0x99
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTPUBRELReasonCode : Swift.UInt8 {
  case success = 0x00
  case packetIdentifierNotFound = 0x92
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTSUBACKReasonCode : Swift.UInt8 {
  case grantedQoS0 = 0x00
  case grantedQoS1 = 0x01
  case grantedQoS2 = 0x02
  case unspecifiedError = 0x80
  case implementationSpecificError = 0x83
  case notAuthorized = 0x87
  case topicFilterInvalid = 0x8F
  case packetIdentifierInUse = 0x91
  case quotaExceeded = 0x97
  case sharedSubscriptionsNotSupported = 0x9E
  case subscriptionIdentifiersNotSupported = 0xA1
  case wildcardSubscriptionsNotSupported = 0xA2
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTUNSUBACKReasonCode : Swift.UInt8 {
  case success = 0x00
  case noSubscriptionExisted = 0x11
  case unspecifiedError = 0x80
  case implementationSpecificError = 0x83
  case notAuthorized = 0x87
  case topicFilterInvalid = 0x8F
  case packetIdentifierInUse = 0x91
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaRetainHandlingOption : Swift.UInt8 {
  case sendOnSubscribe = 0
  case sendOnlyWhenSubscribeIsNew = 1
  case none = 2
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum PayloadFormatIndicator : Swift.UInt8 {
  case unspecified = 0x00
  case utf8 = 0x01
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol CocoaMQTTSocketDelegate : AnyObject {
  func socketConnected(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol)
  func socket(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  func socketUrlSession(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, didReceiveTrust trust: Security.SecTrust, didReceiveChallenge challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  func socket(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, didWriteDataWithTag tag: Swift.Int)
  func socket(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, didRead data: Foundation.Data, withTag tag: Swift.Int)
  func socketDidDisconnect(_ socket: any TBCocoaMQTT.CocoaMQTTSocketProtocol, withError err: (any Swift.Error)?)
}
public protocol CocoaMQTTSocketProtocol {
  var enableSSL: Swift.Bool { get set }
  func setDelegate(_ theDelegate: (any TBCocoaMQTT.CocoaMQTTSocketDelegate)?, delegateQueue: Dispatch.DispatchQueue?)
  func connect(toHost host: Swift.String, onPort port: Swift.UInt16) throws
  func connect(toHost host: Swift.String, onPort port: Swift.UInt16, withTimeout timeout: Foundation.TimeInterval) throws
  func disconnect()
  func readData(toLength length: Swift.UInt, withTimeout timeout: Foundation.TimeInterval, tag: Swift.Int)
  func write(_ data: Foundation.Data, withTimeout timeout: Foundation.TimeInterval, tag: Swift.Int)
  func isTCPConnected() -> Swift.Bool
  func isTCPDisConnected() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class CocoaMQTTSocket : ObjectiveC.NSObject {
  public var backgroundOnSocket: Swift.Bool
  public var enableSSL: Swift.Bool
  public var sslSettings: [Swift.String : ObjectiveC.NSObject]?
  public var allowUntrustCACertificate: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension TBCocoaMQTT.CocoaMQTTSocket : TBCocoaMQTT.CocoaMQTTSocketProtocol {
  public func setDelegate(_ theDelegate: (any TBCocoaMQTT.CocoaMQTTSocketDelegate)?, delegateQueue: Dispatch.DispatchQueue?)
  public func connect(toHost host: Swift.String, onPort port: Swift.UInt16) throws
  public func connect(toHost host: Swift.String, onPort port: Swift.UInt16, withTimeout timeout: Foundation.TimeInterval) throws
  public func disconnect()
  public func readData(toLength length: Swift.UInt, withTimeout timeout: Foundation.TimeInterval, tag: Swift.Int)
  public func write(_ data: Foundation.Data, withTimeout timeout: Foundation.TimeInterval, tag: Swift.Int)
  public func isTCPConnected() -> Swift.Bool
  public func isTCPDisConnected() -> Swift.Bool
}
extension TBCocoaMQTT.CocoaMQTTSocket : MqttCocoaAsyncSocket.MGCDAsyncSocketDelegate {
  @objc dynamic public func socket(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket, didConnectToHost host: Swift.String, port: Swift.UInt16)
  @objc dynamic public func socket(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc dynamic public func socketDidSecure(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket)
  @objc dynamic public func socket(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket, didWriteDataWithTag tag: Swift.Int)
  @objc dynamic public func socket(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket, didRead data: Foundation.Data, withTag tag: Swift.Int)
  @objc dynamic public func socketDidDisconnect(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket, withError err: (any Swift.Error)?)
}
public enum CocoaMQTTError : Swift.Error {
  case invalidURL
  case readTimeout
  case writeTimeout
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public enum FoundationConnection : Swift.Error {
    case closed(Foundation.URLSessionWebSocketTask.CloseCode)
  }
  public static func == (a: TBCocoaMQTT.CocoaMQTTError, b: TBCocoaMQTT.CocoaMQTTError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum CocoaMQTTQoS : Swift.UInt8, Swift.CustomStringConvertible {
  case qos0 = 0
  case qos1
  case qos2
  case FAILURE = 0x80
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension TBCocoaMQTT.CocoaMQTTQoS : Swift.Comparable {
  public static func < (lhs: TBCocoaMQTT.CocoaMQTTQoS, rhs: TBCocoaMQTT.CocoaMQTTQoS) -> Swift.Bool
  public static func <= (lhs: TBCocoaMQTT.CocoaMQTTQoS, rhs: TBCocoaMQTT.CocoaMQTTQoS) -> Swift.Bool
  public static func > (lhs: TBCocoaMQTT.CocoaMQTTQoS, rhs: TBCocoaMQTT.CocoaMQTTQoS) -> Swift.Bool
  public static func >= (lhs: TBCocoaMQTT.CocoaMQTTQoS, rhs: TBCocoaMQTT.CocoaMQTTQoS) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class MqttAuthProperties : ObjectiveC.NSObject {
  public var authenticationMethod: Swift.String?
  public var authenticationData: [Swift.UInt8]?
  public var reasonString: Swift.String?
  public var userProperties: [Swift.String : Swift.String]?
  public var properties: [Swift.UInt8] {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttConnectProperties : ObjectiveC.NSObject {
  public var sessionExpiryInterval: Swift.UInt32?
  public var receiveMaximum: Swift.UInt16?
  public var maximumPacketSize: Swift.UInt32?
  public var topicAliasMaximum: Swift.UInt16?
  public var requestResponseInformation: Swift.UInt8?
  public var requestProblemInfomation: Swift.UInt8?
  public var userProperties: [Swift.String : Swift.String]?
  public var authenticationMethod: Swift.String?
  public var authenticationData: [Swift.UInt8]?
  public var properties: [Swift.UInt8] {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttDecodeConnAck : ObjectiveC.NSObject {
  public var propertyLength: Swift.Int?
  public var sessionExpiryInterval: Swift.UInt32?
  public var receiveMaximum: Swift.UInt16?
  public var maximumQoS: TBCocoaMQTT.CocoaMQTTQoS?
  public var retainAvailable: Swift.Bool?
  public var maximumPacketSize: Swift.UInt32?
  public var assignedClientIdentifier: Swift.String?
  public var topicAliasMaximum: Swift.UInt16?
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public var wildcardSubscriptionAvailable: Swift.Bool?
  public var subscriptionIdentifiersAvailable: Swift.Bool?
  public var sharedSubscriptionAvailable: Swift.Bool?
  public var serverKeepAlive: Swift.UInt16?
  public var responseInformation: Swift.String?
  public var serverReference: Swift.String?
  public var authenticationMethod: Swift.String?
  public var authenticationData: [Swift.UInt8]
  public func properties(connackData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttDecodePubAck : ObjectiveC.NSObject {
  public var reasonCode: TBCocoaMQTT.CocoaMQTTPUBACKReasonCode?
  public var msgid: Swift.UInt16
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public func decodePubAck(fixedHeader: Swift.UInt8, pubAckData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttDecodePubComp : ObjectiveC.NSObject {
  public var reasonCode: TBCocoaMQTT.CocoaMQTTPUBCOMPReasonCode?
  public var msgid: Swift.UInt16
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public func decodePubComp(fixedHeader: Swift.UInt8, pubAckData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttDecodePublish : ObjectiveC.NSObject {
  public var propertyLength: Swift.Int?
  public var payloadFormatIndicator: TBCocoaMQTT.PayloadFormatIndicator?
  public var messageExpiryInterval: Swift.UInt32?
  public var topicAlias: Swift.UInt16?
  public var responseTopic: Swift.String?
  public var correlationData: [Swift.UInt8]?
  public var userProperty: [Swift.String : Swift.String]?
  public var subscriptionIdentifier: Swift.Int
  public var contentType: Swift.String?
  public var topic: Swift.String
  public var packetIdentifier: Swift.UInt16?
  public var mqtt5DataIndex: Swift.Int
  public var isMqtt5: Swift.Bool
  public func decodePublish(fixedHeader: Swift.UInt8, publishData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttDecodePubRec : ObjectiveC.NSObject {
  public var reasonCode: TBCocoaMQTT.CocoaMQTTPUBACKReasonCode?
  public var msgid: Swift.UInt16
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public func decodePubRec(fixedHeader: Swift.UInt8, pubAckData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttDecodePubRel : ObjectiveC.NSObject {
  public var reasonCode: TBCocoaMQTT.CocoaMQTTPUBRELReasonCode?
  public var msgid: Swift.UInt16
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public func decodePubRel(fixedHeader: Swift.UInt8, pubAckData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttDecodeSubAck : ObjectiveC.NSObject {
  public var reasonCodes: [TBCocoaMQTT.CocoaMQTTSUBACKReasonCode]
  public var msgid: Swift.UInt16
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public func decodeSubAck(fixedHeader: Swift.UInt8, pubAckData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttDecodeUnsubAck : ObjectiveC.NSObject {
  public var reasonCodes: [TBCocoaMQTT.CocoaMQTTUNSUBACKReasonCode]
  public var msgid: Swift.UInt16
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public func decodeUnSubAck(fixedHeader: Swift.UInt8, pubAckData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MqttPublishProperties : ObjectiveC.NSObject {
  public var propertyLength: Swift.Int?
  public var payloadFormatIndicator: TBCocoaMQTT.PayloadFormatIndicator?
  public var messageExpiryInterval: Swift.UInt32?
  public var topicAlias: Swift.UInt16?
  public var responseTopic: Swift.String?
  public var correlationData: [Swift.UInt8]?
  public var userProperty: [Swift.String : Swift.String]?
  public var subscriptionIdentifier: Swift.UInt32?
  public var contentType: Swift.String?
  public init(propertyLength: Swift.Int? = nil, payloadFormatIndicator: TBCocoaMQTT.PayloadFormatIndicator? = nil, messageExpiryInterval: Swift.UInt32? = nil, topicAlias: Swift.UInt16? = nil, responseTopic: Swift.String? = nil, correlation: Swift.String? = nil, userProperty: [Swift.String : Swift.String]? = nil, subscriptionIdentifier: Swift.UInt32? = nil, contentType: Swift.String? = nil)
  public var properties: [Swift.UInt8] {
    get
  }
  @objc deinit
}
public class MqttSubscription {
  public var topic: Swift.String
  public var qos: TBCocoaMQTT.CocoaMQTTQoS
  public var noLocal: Swift.Bool
  public var retainAsPublished: Swift.Bool
  public var retainHandling: TBCocoaMQTT.CocoaRetainHandlingOption
  public var subscriptionOptions: Swift.Bool
  public init(topic: Swift.String)
  public init(topic: Swift.String, qos: TBCocoaMQTT.CocoaMQTTQoS)
  @objc deinit
}
@objc public protocol TBCocoaMqttClientDelegate {
  @objc func mqtt(_ mqtt: any TBCocoaMQTT.TBCocoaMqttClient, didStateChangeTo state: TBCocoaMQTT.CocoaMQTTConnState)
  @objc func mqtt(_ mqtt: any TBCocoaMQTT.TBCocoaMqttClient, didPublishStateChangeTo state: TBCocoaMQTT.CocoaMQTTConnState)
  @objc func mqtt(_ mqtt: any TBCocoaMQTT.TBCocoaMqttClient, didReceiveMessage message: TBCocoaMQTT.CocoaMQTT5Message, id: Swift.UInt16, publishData: TBCocoaMQTT.MqttDecodePublish?)
  @objc func mqtt(_ mqtt: any TBCocoaMQTT.TBCocoaMqttClient, didReceivePublishMessage message: TBCocoaMQTT.CocoaMQTT5Message, id: Swift.UInt16, publishData: TBCocoaMQTT.MqttDecodePublish?)
}
@objc public protocol TBCocoaMqttClient {
  @objc func subscribeTopic(topic: Swift.String, userProperty: [Swift.String : Swift.String]?)
  @objc func unsubscribe(topic: Swift.String, userProperty: [Swift.String : Swift.String]?)
  @objc func subscribeTopics(topics: [Swift.String], userProperty: [Swift.String : Swift.String]?)
  @objc func unsubscribe(topics: [Swift.String], userProperty: [Swift.String : Swift.String]?)
  @objc func publish(_ topic: Swift.String, responseTopic: Swift.String, topicPayload: [Swift.String : Any], correlationData: Swift.String, userProperty: [Swift.String : Swift.String]?) -> Swift.Int
  @objc func publish(_ topic: Swift.String, responseTopic: Swift.String, correlationData: Swift.String, message: TBCocoaMQTT.CocoaMQTTMessage, userProperty: [Swift.String : Swift.String]?) -> Swift.Int
  @objc func connect() -> Swift.Bool
  @objc func connect(timeout: Foundation.TimeInterval) -> Swift.Bool
  @objc func disconnect()
  @objc func ping()
  @objc var delegate: (any TBCocoaMQTT.TBCocoaMqttClientDelegate)? { get set }
}
@objc public class TBMqttClient5Manager : ObjectiveC.NSObject {
  public func update(userProperty: [Swift.String : Swift.String]?)
  public init(config: TBCocoaMQTT.TBMqttConfig)
  public func update(config: TBCocoaMQTT.TBMqttConfig)
  public func removeObserver()
  @objc public var delegate: (any TBCocoaMQTT.TBCocoaMqttClientDelegate)?
  @objc deinit
}
extension TBCocoaMQTT.TBMqttClient5Manager : TBCocoaMQTT.TBCocoaMqttClient {
  @objc dynamic public func subscribeTopic(topic: Swift.String, userProperty: [Swift.String : Swift.String]? = nil)
  @objc dynamic public func unsubscribe(topic: Swift.String, userProperty: [Swift.String : Swift.String]? = nil)
  @objc dynamic public func subscribeTopics(topics: [Swift.String], userProperty: [Swift.String : Swift.String]? = nil)
  @objc dynamic public func unsubscribe(topics: [Swift.String], userProperty: [Swift.String : Swift.String]? = nil)
  @objc dynamic public func publish(_ topic: Swift.String, responseTopic: Swift.String, topicPayload: [Swift.String : Any], correlationData: Swift.String, userProperty: [Swift.String : Swift.String]?) -> Swift.Int
  @objc dynamic public func publish(_ topic: Swift.String, responseTopic: Swift.String, correlationData: Swift.String, message: TBCocoaMQTT.CocoaMQTTMessage, userProperty: [Swift.String : Swift.String]?) -> Swift.Int
  @objc dynamic public func connect() -> Swift.Bool
  @objc dynamic public func subscribeConnect() -> Swift.Bool
  @objc dynamic public func publishConnect() -> Swift.Bool
  @objc dynamic public func subscribeConnect(timeout: Foundation.TimeInterval) -> Swift.Bool
  @objc dynamic public func publishConnect(timeout: Foundation.TimeInterval) -> Swift.Bool
  @objc dynamic public func connect(timeout: Foundation.TimeInterval) -> Swift.Bool
  @objc dynamic public func disconnect()
  @objc dynamic public func publishDisconnect()
  @objc dynamic public func subscribeDisconnect()
  @objc dynamic public func ping()
  @objc dynamic public func publishPing()
  @objc dynamic public func subscribePing()
}
extension TBCocoaMQTT.TBMqttClient5Manager : TBCocoaMQTT.CocoaMQTT5Delegate {
  @objc dynamic public func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didConnectAck ack: TBCocoaMQTT.CocoaMQTTCONNACKReasonCode, connAckData: TBCocoaMQTT.MqttDecodeConnAck?)
  @objc dynamic public func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didPublishMessage message: TBCocoaMQTT.CocoaMQTT5Message, id: Swift.UInt16)
  @objc dynamic public func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didPublishAck id: Swift.UInt16, pubAckData: TBCocoaMQTT.MqttDecodePubAck?)
  @objc dynamic public func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didPublishRec id: Swift.UInt16, pubRecData: TBCocoaMQTT.MqttDecodePubRec?)
  @objc dynamic public func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didReceiveMessage message: TBCocoaMQTT.CocoaMQTT5Message, id: Swift.UInt16, publishData: TBCocoaMQTT.MqttDecodePublish?)
  @objc dynamic public func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didSubscribeTopics success: Foundation.NSDictionary, failed: [Swift.String], subAckData: TBCocoaMQTT.MqttDecodeSubAck?)
  @objc dynamic public func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didUnsubscribeTopics topics: [Swift.String], unsubAckData UnsubAckData: TBCocoaMQTT.MqttDecodeUnsubAck?)
  @objc dynamic public func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc dynamic public func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didReceiveDisconnectReasonCode reasonCode: TBCocoaMQTT.CocoaMQTTDISCONNECTReasonCode)
  @objc dynamic public func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didReceiveAuthReasonCode reasonCode: TBCocoaMQTT.CocoaMQTTAUTHReasonCode)
  @objc dynamic public func mqtt5DidPing(_ mqtt5: TBCocoaMQTT.CocoaMQTT5)
  @objc dynamic public func mqtt5DidReceivePong(_ mqtt5: TBCocoaMQTT.CocoaMQTT5)
  @objc dynamic public func mqtt5DidDisconnect(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, withError err: (any Swift.Error)?)
  @objc dynamic public func mqtt5(_ mqtt5: TBCocoaMQTT.CocoaMQTT5, didStateChangeTo state: TBCocoaMQTT.CocoaMQTTConnState)
}
extension TBCocoaMQTT.TBMqttClient5Manager : TBCocoaMQTT.CocoaMQTTDelegate {
  @objc dynamic public func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didStateChangeTo state: TBCocoaMQTT.CocoaMQTTConnState)
  @objc dynamic public func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didConnectAck ack: TBCocoaMQTT.CocoaMQTTConnAck)
  @objc dynamic public func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didPublishMessage message: TBCocoaMQTT.CocoaMQTTMessage, id: Swift.UInt16)
  @objc dynamic public func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didPublishAck id: Swift.UInt16)
  @objc dynamic public func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didReceiveMessage message: TBCocoaMQTT.CocoaMQTTMessage, id: Swift.UInt16)
  @objc dynamic public func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didSubscribeTopics success: Foundation.NSDictionary, failed: [Swift.String])
  @objc dynamic public func mqtt(_ mqtt: TBCocoaMQTT.CocoaMQTT, didUnsubscribeTopics topics: [Swift.String])
  @objc dynamic public func mqttDidPing(_ mqtt: TBCocoaMQTT.CocoaMQTT)
  @objc dynamic public func mqttDidReceivePong(_ mqtt: TBCocoaMQTT.CocoaMQTT)
  @objc dynamic public func mqttDidDisconnect(_ mqtt: TBCocoaMQTT.CocoaMQTT, withError err: (any Swift.Error)?)
}
@objc public class TBMqttConfig : ObjectiveC.NSObject {
  public init(host: Swift.String? = nil, port: Swift.UInt16? = nil, username: Swift.String? = nil, password: Swift.String? = nil, enableSSL: Swift.Bool = true, publishHost: Swift.String? = nil, publishPort: Swift.UInt16? = nil, publishEnableSSL: Swift.Bool = true, publishEnable: Swift.Bool = true)
  @objc deinit
}
public class ThreadSafeDictionary<K, V> : Swift.Collection where K : Swift.Hashable {
  public var startIndex: Swift.Dictionary<K, V>.Index {
    get
  }
  public var endIndex: Swift.Dictionary<K, V>.Index {
    get
  }
  public init(label: Swift.String, dict: [K : V] = [K:V]())
  public func index(after i: Swift.Dictionary<K, V>.Index) -> Swift.Dictionary<K, V>.Index
  public subscript(key: K) -> V? {
    get
    set(newValue)
  }
  public subscript(index: Swift.Dictionary<K, V>.Index) -> Swift.Dictionary<K, V>.Element {
    get
  }
  @discardableResult
  public func removeValue(forKey key: K) -> V?
  public func removeAll()
  public typealias Element = Swift.Dictionary<K, V>.Element
  public typealias Index = Swift.Dictionary<K, V>.Index
  public typealias Indices = Swift.DefaultIndices<TBCocoaMQTT.ThreadSafeDictionary<K, V>>
  public typealias Iterator = Swift.IndexingIterator<TBCocoaMQTT.ThreadSafeDictionary<K, V>>
  public typealias SubSequence = Swift.Slice<TBCocoaMQTT.ThreadSafeDictionary<K, V>>
  @objc deinit
}
extension TBCocoaMQTT.CocoaMQTTConnAck : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTConnAck : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTConnAck : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaMQTTConnState : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTConnState : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTConnState : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaMQTTLoggerLevel : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTLoggerLevel : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTLoggerLevel : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaMQTTPropertyName : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTPropertyName : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTPropertyName : Swift.RawRepresentable {}
extension TBCocoaMQTT.formatInt : Swift.Equatable {}
extension TBCocoaMQTT.formatInt : Swift.Hashable {}
extension TBCocoaMQTT.formatInt : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaMQTTAUTHReasonCode : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTAUTHReasonCode : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTAUTHReasonCode : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaMQTTCONNACKReasonCode : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTCONNACKReasonCode : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTCONNACKReasonCode : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaMQTTDISCONNECTReasonCode : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTDISCONNECTReasonCode : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTDISCONNECTReasonCode : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaMQTTPUBACKReasonCode : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTPUBACKReasonCode : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTPUBACKReasonCode : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaMQTTPUBCOMPReasonCode : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTPUBCOMPReasonCode : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTPUBCOMPReasonCode : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaMQTTPUBRECReasonCode : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTPUBRECReasonCode : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTPUBRECReasonCode : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaMQTTPUBRELReasonCode : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTPUBRELReasonCode : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTPUBRELReasonCode : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaMQTTSUBACKReasonCode : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTSUBACKReasonCode : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTSUBACKReasonCode : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaMQTTUNSUBACKReasonCode : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTUNSUBACKReasonCode : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTUNSUBACKReasonCode : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaRetainHandlingOption : Swift.Equatable {}
extension TBCocoaMQTT.CocoaRetainHandlingOption : Swift.Hashable {}
extension TBCocoaMQTT.CocoaRetainHandlingOption : Swift.RawRepresentable {}
extension TBCocoaMQTT.PayloadFormatIndicator : Swift.Equatable {}
extension TBCocoaMQTT.PayloadFormatIndicator : Swift.Hashable {}
extension TBCocoaMQTT.PayloadFormatIndicator : Swift.RawRepresentable {}
extension TBCocoaMQTT.CocoaMQTTError : Swift.Equatable {}
extension TBCocoaMQTT.CocoaMQTTError : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTQoS : Swift.Hashable {}
extension TBCocoaMQTT.CocoaMQTTQoS : Swift.RawRepresentable {}
